
08-LDR_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000040d6  0000416a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008001aa  008001aa  000042b4  2**0
                  ALLOC
  3 .stab         000045f0  00000000  00000000  000042b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001df6  00000000  00000000  000088a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a69a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a83a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ce37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000101b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__vector_1>
       8:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_2>
       c:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__vector_6>
      1c:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_7>
      20:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_8>
      24:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_13>
      38:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_14>
      3c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_15>
      40:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <main>
      8a:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 59       	subi	r30, 0x94	; 148
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vInit>:
#include "UART_pri.h"
#include "UART_cfg.h"
#include "UART_int.h"

void UART_vInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
u8 L_u8UCSRC=0;
     e38:	19 82       	std	Y+1, r1	; 0x01
SET_BIT(L_u8UCSRC,URSEL);
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	89 83       	std	Y+1, r24	; 0x01
#if UART_SET_MODE==UART_ASYNC_MODE
		CLR_BIT(L_u8UCSRC,UMSEL);
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(L_u8UCSRC,UMSEL);
#else
#warning "Invalid Mode of UART......"
#endif
#if UART_PARITY_MODE==UART_DISABLED_PARITY
		CLR_BIT(L_u8UCSRC,UPM0);
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	8f 7e       	andi	r24, 0xEF	; 239
     e4a:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(L_u8UCSRC,UPM1);
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Invalid Parity Mode of UART....."
#endif

#if	UART_STOP_BIT_SELECT==UART_ONE_STOP_BIT
		CLR_BIT(L_u8UCSRC,USBS);
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	89 83       	std	Y+1, r24	; 0x01
#elif  UART_CHAR_FRAME_SIZE==UART_7_BITS
		L_u8UCSRC&=UART_CHAR_SIZE_MASK;
		L_u8UCSRC|=UART_7_BITS;

#elif  UART_CHAR_FRAME_SIZE==UART_8_BITS
		L_u8UCSRC&=UART_CHAR_SIZE_MASK;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	89 7f       	andi	r24, 0xF9	; 249
     e5c:	89 83       	std	Y+1, r24	; 0x01
		L_u8UCSRC|=UART_8_BITS;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	86 60       	ori	r24, 0x06	; 6
     e62:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Invalid Data Size Mode of UART....."
#endif

#if UART_CLK_PARITY== UART_CLK_PARITY_RISING_TX_FALIING_RX
		CLR_BIT(L_u8UCSRC,UCPOL);
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8e 7f       	andi	r24, 0xFE	; 254
     e68:	89 83       	std	Y+1, r24	; 0x01

#else
#warning "Invalid Clock Polarity Mode of UART....."
#endif

	UCSRC=L_u8UCSRC;
     e6a:	e0 e4       	ldi	r30, 0x40	; 64
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	80 83       	st	Z, r24

#if  UART_RXC_INT_STATE==UART_INT_ENABLE
	SET_BIT(UCSRB,RXCIE);
#else
	CLR_BIT(UCSRB,RXCIE);
     e72:	aa e2       	ldi	r26, 0x2A	; 42
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e2       	ldi	r30, 0x2A	; 42
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	8c 93       	st	X, r24
#endif

#if  UART_TXC_INT_STATE==UART_INT_ENABLE
	SET_BIT(UCSRB,TXCIE);
#else
	CLR_BIT(UCSRB,TXCIE);
     e80:	aa e2       	ldi	r26, 0x2A	; 42
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ea e2       	ldi	r30, 0x2A	; 42
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
     e8c:	8c 93       	st	X, r24
#endif

#if UDRT_DRE_INT_STATE==UART_INT_ENABLE
	SET_BIT(UCSRB,UDRIE);
	#else
		CLR_BIT(UCSRB,UDRIE);
     e8e:	aa e2       	ldi	r26, 0x2A	; 42
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e2       	ldi	r30, 0x2A	; 42
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7d       	andi	r24, 0xDF	; 223
     e9a:	8c 93       	st	X, r24
	#endif

	SET_BIT(UCSRB,RXEN);	/*Enable Receiver*/
     e9c:	aa e2       	ldi	r26, 0x2A	; 42
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e2       	ldi	r30, 0x2A	; 42
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 61       	ori	r24, 0x10	; 16
     ea8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);    /*Enable Transmitter*/
     eaa:	aa e2       	ldi	r26, 0x2A	; 42
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e2       	ldi	r30, 0x2A	; 42
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	8c 93       	st	X, r24

	UBBRL=51; /*equation BUD :BUD=f_cpu/(16*(UBR+1))*/
     eb8:	e9 e2       	ldi	r30, 0x29	; 41
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	83 e3       	ldi	r24, 0x33	; 51
     ebe:	80 83       	st	Z, r24

	DIO_vPinDir(PORTA_ID,PIN0_ID,DIR_INPUT); /*RX configure as Input*/
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(PORTA_ID,PIN1_ID,DIR_OUTPUT);/*TX configure as Output*/
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
}
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <UART_vSendData>:


void UART_vSendData(u8 A_u8Data)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE)==0);
     ee8:	eb e2       	ldi	r30, 0x2B	; 43
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	86 95       	lsr	r24
     ef2:	87 70       	andi	r24, 0x07	; 7
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	90 70       	andi	r25, 0x00	; 0
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	a1 f3       	breq	.-24     	; 0xee8 <UART_vSendData+0xc>
	UDR=A_u8Data;
     f00:	ec e2       	ldi	r30, 0x2C	; 44
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	80 83       	st	Z, r24
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_u8GetData>:
/*put your data
 * Busy wait until finish TCF or buffer empty
 * */
u8 UART_u8GetData(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,RXC)==0);
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	dc f7       	brge	.-10     	; 0xf18 <UART_u8GetData+0x8>
	return UDR;
     f22:	ec e2       	ldi	r30, 0x2C	; 44
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <UART_vSend_String>:
/*wait until receive flag is raised
 * return data from register UDR
 * */
void UART_vSend_String(u8* A_u8String)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <UART_vSend_String+0x6>
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	8a 83       	std	Y+2, r24	; 0x02
u8 L_u8CountChar=0;
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	0e c0       	rjmp	.+28     	; 0xf5e <UART_vSend_String+0x30>
while(A_u8String[L_u8CountChar]!=ADDRESS_NULL)
{
	UART_vSendData(A_u8String[L_u8CountChar]);
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	fc 01       	movw	r30, r24
     f4e:	e2 0f       	add	r30, r18
     f50:	f3 1f       	adc	r31, r19
     f52:	80 81       	ld	r24, Z
     f54:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_vSendData>
	L_u8CountChar++;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	89 83       	std	Y+1, r24	; 0x01
 * return data from register UDR
 * */
void UART_vSend_String(u8* A_u8String)
{
u8 L_u8CountChar=0;
while(A_u8String[L_u8CountChar]!=ADDRESS_NULL)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	9b 81       	ldd	r25, Y+3	; 0x03
     f68:	fc 01       	movw	r30, r24
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	80 81       	ld	r24, Z
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	29 f7       	brne	.-54     	; 0xf42 <UART_vSend_String+0x14>
{
	UART_vSendData(A_u8String[L_u8CountChar]);
	L_u8CountChar++;
}
UART_vSendData('\0');
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_vSendData>

}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <UART_vGet_String>:

/*receive string*/
void UART_vGet_String(u8* A_u8String)
{
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <UART_vGet_String+0xa>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9b 83       	std	Y+3, r25	; 0x03
     f9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8CountChar=0;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	A_u8String[L_u8CountChar]=UART_u8GetData();
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	8c 01       	movw	r16, r24
     fac:	02 0f       	add	r16, r18
     fae:	13 1f       	adc	r17, r19
     fb0:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_u8GetData>
     fb4:	f8 01       	movw	r30, r16
     fb6:	80 83       	st	Z, r24
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <UART_vGet_String+0x4e>
	while(A_u8String[L_u8CountChar]!=ADDRESS_NULL)
	{
		L_u8CountChar++;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	89 83       	std	Y+1, r24	; 0x01
		A_u8String[L_u8CountChar]=UART_u8GetData();
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	8c 01       	movw	r16, r24
     fcc:	02 0f       	add	r16, r18
     fce:	13 1f       	adc	r17, r19
     fd0:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_u8GetData>
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
/*receive string*/
void UART_vGet_String(u8* A_u8String)
{
	u8 L_u8CountChar=0;
	A_u8String[L_u8CountChar]=UART_u8GetData();
	while(A_u8String[L_u8CountChar]!=ADDRESS_NULL)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	fc 01       	movw	r30, r24
     fe4:	e2 0f       	add	r30, r18
     fe6:	f3 1f       	adc	r31, r19
     fe8:	80 81       	ld	r24, Z
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	21 f7       	brne	.-56     	; 0xfba <UART_vGet_String+0x30>
	{
		L_u8CountChar++;
		A_u8String[L_u8CountChar]=UART_u8GetData();
	}
	A_u8String[L_u8CountChar]='\0';
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	10 82       	st	Z, r1
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	08 95       	ret

00001014 <UART_u8IsTxComplete>:
u8 UART_u8IsTxComplete(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(UCSRA,TXC);
    101c:	eb e2       	ldi	r30, 0x2B	; 43
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 95       	swap	r24
    1024:	86 95       	lsr	r24
    1026:	86 95       	lsr	r24
    1028:	83 70       	andi	r24, 0x03	; 3
    102a:	81 70       	andi	r24, 0x01	; 1
}
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_u8IsRxComplete>:

u8 UART_u8IsRxComplete(void)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(UCSRA,RXC);
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 1f       	adc	r24, r24
    1042:	88 27       	eor	r24, r24
    1044:	88 1f       	adc	r24, r24
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <UART_vCallBack_RXC>:


/*set callback to execute ISR related with RXC Event*/
void UART_vCallBack_RXC(void(*Fptr)(void))
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <UART_vCallBack_RXC+0x6>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_UART_RXC=Fptr;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	90 93 ab 01 	sts	0x01AB, r25
    1062:	80 93 aa 01 	sts	0x01AA, r24
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <UART_vCallBack_TXC>:

/*set callback to execute ISR related with TXC Event*/
void UART_vCallBack_TXC(void(*Fptr)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <UART_vCallBack_TXC+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_UART_TXC=Fptr;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	90 93 af 01 	sts	0x01AF, r25
    1086:	80 93 ae 01 	sts	0x01AE, r24
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <UART_vCallBack_UDRE>:

/*set callback to execute ISR related with UDRE Event*/
void UART_vCallBack_UDRE(void(*Fptr)(void))
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <UART_vCallBack_UDRE+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_UART_UDRE=Fptr;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	90 93 ad 01 	sts	0x01AD, r25
    10aa:	80 93 ac 01 	sts	0x01AC, r24
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <__vector_13>:

/* Receiver Complete UART ISR*/
void __vector_13 (void)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_UART_RXC();
    10e2:	e0 91 aa 01 	lds	r30, 0x01AA
    10e6:	f0 91 ab 01 	lds	r31, 0x01AB
    10ea:	09 95       	icall
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__vector_14>:

/* Data Register Empty UART ISR*/
void __vector_14 (void)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_UART_UDRE();
    113c:	e0 91 ac 01 	lds	r30, 0x01AC
    1140:	f0 91 ad 01 	lds	r31, 0x01AD
    1144:	09 95       	icall
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <__vector_15>:

/* Transmitter Complete UAR ISR*/
void __vector_15 (void)
{
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_UART_TXC();
    1196:	e0 91 ae 01 	lds	r30, 0x01AE
    119a:	f0 91 af 01 	lds	r31, 0x01AF
    119e:	09 95       	icall
}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <TIMER1_vInit>:
#include "TIMER1_cfg.h"
#include "TIMER1_int.h"


void TIMER1_vInit(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62

	#endif

	#elif   TIMER1_MODE==TIMER1_FAST_PWM_ICR1

			 CLR_BIT(TCCR1A,WGM10);
    11ce:	af e4       	ldi	r26, 0x4F	; 79
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ef e4       	ldi	r30, 0x4F	; 79
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8e 7f       	andi	r24, 0xFE	; 254
    11da:	8c 93       	st	X, r24
			 SET_BIT(TCCR1A,WGM11);
    11dc:	af e4       	ldi	r26, 0x4F	; 79
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	82 60       	ori	r24, 0x02	; 2
    11e8:	8c 93       	st	X, r24
		     SET_BIT(TCCR1B,WGM12);
    11ea:	ae e4       	ldi	r26, 0x4E	; 78
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ee e4       	ldi	r30, 0x4E	; 78
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	88 60       	ori	r24, 0x08	; 8
    11f6:	8c 93       	st	X, r24
		     SET_BIT(TCCR1B,WGM13); /*Fast PWM ICR1 mode*/
    11f8:	ae e4       	ldi	r26, 0x4E	; 78
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ee e4       	ldi	r30, 0x4E	; 78
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 61       	ori	r24, 0x10	; 16
    1204:	8c 93       	st	X, r24
      #if TIMER1_INTERRUPT_STATE_OVF==TIMER1_INT_ENABLE
	  SET_BIT(TIMSK,TOIE1) ;/*enable OVF interrupt*/
	        #endif

      #if TIMER1_INTERRUPT_STATE_CTCA==TIMER1_INT_ENABLE
	  SET_BIT(TIMSK, OCIE1A);/*enable OC1A interrupt*/
    1206:	a9 e5       	ldi	r26, 0x59	; 89
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e9 e5       	ldi	r30, 0x59	; 89
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	8c 93       	st	X, r24

      #if TIMER1_INTERRUPT_STATE_CTCB==TIMER1_INT_ENABLE
	  SET_BIT(TIMSK, OCIE1B);/*enable OC1B interrupt*/
	  #endif

	DIO_vPinDir(OC1A_PORT, OC1A_PIN,DIR_OUTPUT);
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	65 e0       	ldi	r22, 0x05	; 5
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(OC1B_PORT, OC1B_PIN,DIR_OUTPUT);
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	64 e0       	ldi	r22, 0x04	; 4
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>


	#if TIMER1_PWM_MODE_OC1A==TIMER1_PWM_NON_INVERTING
	CLR_BIT(TCCR1A,COM1A0);
    1228:	af e4       	ldi	r26, 0x4F	; 79
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ef e4       	ldi	r30, 0x4F	; 79
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7b       	andi	r24, 0xBF	; 191
    1234:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);/*CLR OC1A*/
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	8c 93       	st	X, r24


	#endif


}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <TIMER1_vSetPreload>:

/*set preload to start count from the preload value*/
void TIMER1_vSetPreload(u8 A_u8PreloadVal)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01

}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TIMER1_vSetOcrA1Val>:

/*set OCR1A to be the top counts to generate CTC flag*/
void TIMER1_vSetOcrA1Val(u16 A_u16Ocr1aVal)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <TIMER1_vSetOcrA1Val+0x6>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_u16Ocr1aVal;
    126c:	ea e4       	ldi	r30, 0x4A	; 74
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <TIMER1_vSetOcrB1Val>:

/*set OCR1B to be the top counts to generate CTC flag*/
void TIMER1_vSetOcrB1Val(u16 A_u16Ocr1bVal)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <TIMER1_vSetOcrB1Val+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=A_u16Ocr1bVal;
    1290:	e8 e4       	ldi	r30, 0x48	; 72
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <TIMER1_vSetICR1>:

/*Set ICR1 to be the top counts*/
void TIMER1_vSetICR1(u16 A_u16ICR)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <TIMER1_vSetICR1+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=A_u16ICR;
    12b4:	e6 e4       	ldi	r30, 0x46	; 70
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <TIMER1_vCallBack_OVF>:

/*set callback to execute ISR related with OVR Event*/
void TIMER1_vCallBack_OVF(void(*Fptr)(void))
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <TIMER1_vCallBack_OVF+0x6>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_TIMER1_OVF=Fptr;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	90 93 b3 01 	sts	0x01B3, r25
    12e0:	80 93 b2 01 	sts	0x01B2, r24
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TIMER1_vCallBack_CTCA>:

/*set callback to execute ISR related with CTCA Event*/
void TIMER1_vCallBack_CTCA(void(*Fptr)(void))
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <TIMER1_vCallBack_CTCA+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_TIMER1_CTCA=Fptr;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	90 93 b5 01 	sts	0x01B5, r25
    1304:	80 93 b4 01 	sts	0x01B4, r24
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <TIMER1_vCallBack_CTCB>:

/*set callback to execute ISR related with CTCB Event*/
void TIMER1_vCallBack_CTCB(void(*Fptr)(void))
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <TIMER1_vCallBack_CTCB+0x6>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_TIMER1_CTCB=Fptr;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	90 93 b7 01 	sts	0x01B7, r25
    1328:	80 93 b6 01 	sts	0x01B6, r24
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <TIMER1_vCallBack_CE>:

/*set callback to execute ISR related with Capture Event*/
void TIMER1_vCallBack_CE(void(*Fptr)(void))
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <TIMER1_vCallBack_CE+0x6>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
	G_PTRF_TIMER1_CE=Fptr;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	90 93 b1 01 	sts	0x01B1, r25
    134c:	80 93 b0 01 	sts	0x01B0, r24
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <TIMER1_vTurnOn>:

/*Turn On Timer1*/
void TIMER1_vTurnOn(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=TIMER1_CLK_SELECT_MASK;
    1362:	ae e4       	ldi	r26, 0x4E	; 78
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ee e4       	ldi	r30, 0x4E	; 78
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	88 7f       	andi	r24, 0xF8	; 248
    136e:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_CLOCK_SELECT;
    1370:	ae e4       	ldi	r26, 0x4E	; 78
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ee e4       	ldi	r30, 0x4E	; 78
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	8c 93       	st	X, r24
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <TIMER1_vTurnOff>:

/*Turn Off Timer1*/
void TIMER1_vTurnOff(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=TIMER1_CLK_SELECT_MASK;
    138c:	ae e4       	ldi	r26, 0x4E	; 78
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ee e4       	ldi	r30, 0x4E	; 78
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	88 7f       	andi	r24, 0xF8	; 248
    1398:	8c 93       	st	X, r24
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TIMER1_vDelay>:

/*make Delay*/
void TIMER1_vDelay(u8 A_u8TimeBySecond)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01

}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TIMER1_u8DutyCycleOc1A>:

/*Get Duty cycle of wave on OC1A */
u8 TIMER1_u8DutyCycleOc1A()
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	return 0;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <TIMER1_u8DutyCycleOc1B>:

/*Get Duty cycle of wave on OC1B */
u8 TIMER1_u8DutyCycleOc1B()
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	return 0;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <TIMER1_u32FrequencyOfOC1APin>:

/*Get frequency of wave on OC1A */
u32 TIMER1_u32FrequencyOfOC1APin()
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	return 0;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
}
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <TIMER1_u32FrequencyOfOC1BPin>:

/*Get frequency of wave on OC1B */
u32 TIMER1_u32FrequencyOfOC1BPin()
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
return 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
}
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <TIMER1_u16ReadICR1>:

/*Read ICR1*/
u16 TIMER1_u16ReadICR1()
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1410:	e6 e4       	ldi	r30, 0x46	; 70
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <TIMER1_vSetTrigger>:

/*choose trigger*/
void TIMER1_vSetTrigger(u8 A_u8Trigger)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <TIMER1_vSetTrigger+0x6>
    1424:	0f 92       	push	r0
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Trigger)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3b 83       	std	Y+3, r19	; 0x03
    1434:	2a 83       	std	Y+2, r18	; 0x02
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	31 f0       	breq	.+12     	; 0x144a <TIMER1_vSetTrigger+0x2c>
    143e:	2a 81       	ldd	r18, Y+2	; 0x02
    1440:	3b 81       	ldd	r19, Y+3	; 0x03
    1442:	21 30       	cpi	r18, 0x01	; 1
    1444:	31 05       	cpc	r19, r1
    1446:	49 f0       	breq	.+18     	; 0x145a <TIMER1_vSetTrigger+0x3c>
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <TIMER1_vSetTrigger+0x4a>
	{
	case TIMER1_ICU_FALLING_EDGE: CLR_BIT(TCCR1B,ICES1);break;
    144a:	ae e4       	ldi	r26, 0x4E	; 78
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ee e4       	ldi	r30, 0x4E	; 78
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8f 7b       	andi	r24, 0xBF	; 191
    1456:	8c 93       	st	X, r24
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <TIMER1_vSetTrigger+0x4a>
	case TIMER1_ICU_RISING_EDGE:  SET_BIT(TCCR1B,ICES1);break;
    145a:	ae e4       	ldi	r26, 0x4E	; 78
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ee e4       	ldi	r30, 0x4E	; 78
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 64       	ori	r24, 0x40	; 64
    1466:	8c 93       	st	X, r24
	}
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <TIMER1_vDisableIcuInt>:

/*Disable Inerrupt of ICU*/
void TIMER1_vDisableIcuInt()
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    147c:	a9 e5       	ldi	r26, 0x59	; 89
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 e5       	ldi	r30, 0x59	; 89
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7d       	andi	r24, 0xDF	; 223
    1488:	8c 93       	st	X, r24
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <__vector_6>:

/* Capture Event Timer1 ISR*/
void __vector_6 (void)
{
    1490:	1f 92       	push	r1
    1492:	0f 92       	push	r0
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	0f 92       	push	r0
    1498:	11 24       	eor	r1, r1
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_TIMER1_CE();
    14ba:	e0 91 b0 01 	lds	r30, 0x01B0
    14be:	f0 91 b1 01 	lds	r31, 0x01B1
    14c2:	09 95       	icall
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	0f 90       	pop	r0
    14e6:	1f 90       	pop	r1
    14e8:	18 95       	reti

000014ea <__vector_7>:

/* Compare Match A Timer1 ISR*/
void __vector_7 (void)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_TIMER1_CTCA();
    1514:	e0 91 b4 01 	lds	r30, 0x01B4
    1518:	f0 91 b5 01 	lds	r31, 0x01B5
    151c:	09 95       	icall
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <__vector_8>:

/* Compare Match B Timer1 ISR*/
void __vector_8 (void)
{
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_TIMER1_CTCB();
    156e:	e0 91 b6 01 	lds	r30, 0x01B6
    1572:	f0 91 b7 01 	lds	r31, 0x01B7
    1576:	09 95       	icall
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <__vector_9>:

/* OVF TIMER1 ISR*/
void __vector_9 (void)
{
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	4f 93       	push	r20
    15ae:	5f 93       	push	r21
    15b0:	6f 93       	push	r22
    15b2:	7f 93       	push	r23
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	ef 93       	push	r30
    15be:	ff 93       	push	r31
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	G_PTRF_TIMER1_OVF();
    15c8:	e0 91 b2 01 	lds	r30, 0x01B2
    15cc:	f0 91 b3 01 	lds	r31, 0x01B3
    15d0:	09 95       	icall
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <GIE_vEnableGlobalInterrupt>:
#include "GIE_reg.h"
#include"GIE_int.h"


void GIE_vEnableGlobalInterrupt()
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1600:	af e5       	ldi	r26, 0x5F	; 95
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ef e5       	ldi	r30, 0x5F	; 95
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	8c 93       	st	X, r24
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <GIE_vDisableGlobalInterrupt>:
void GIE_vDisableGlobalInterrupt()
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    161c:	af e5       	ldi	r26, 0x5F	; 95
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ef e5       	ldi	r30, 0x5F	; 95
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 77       	andi	r24, 0x7F	; 127
    1628:	8c 93       	st	X, r24
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <__vector_1>:
static void (*G_ISR_ptr0)(void);
static void (*G_ISR_ptr1)(void);
static void (*G_ISR_ptr2)(void);

void __vector_1 (void)
{
    1630:	1f 92       	push	r1
    1632:	0f 92       	push	r0
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	0f 92       	push	r0
    1638:	11 24       	eor	r1, r1
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
	G_ISR_ptr0();
    165a:	e0 91 b8 01 	lds	r30, 0x01B8
    165e:	f0 91 b9 01 	lds	r31, 0x01B9
    1662:	09 95       	icall


}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <__vector_2>:
void __vector_2 (void)
{
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	G_ISR_ptr1();
    16b4:	e0 91 ba 01 	lds	r30, 0x01BA
    16b8:	f0 91 bb 01 	lds	r31, 0x01BB
    16bc:	09 95       	icall

}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_3>:
void __vector_3 (void)
{
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	G_ISR_ptr2();
    170e:	e0 91 bc 01 	lds	r30, 0x01BC
    1712:	f0 91 bd 01 	lds	r31, 0x01BD
    1716:	09 95       	icall

}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <EXI_vInitInt0>:

void EXI_vInitInt0()
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinDir(INT0_PORT,INT0_PIN,DIR_INPUT);
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vSetPinVal(INT0_PORT,INT0_PIN,VAL_HIGH);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT0); //enable INT0
    175a:	ab e5       	ldi	r26, 0x5B	; 91
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e5       	ldi	r30, 0x5B	; 91
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	8c 93       	st	X, r24

#if (INT0_MODE==INT0_FALLING_EDGE)
	CLR_BIT(MCUCR,ISC00);
    1768:	a5 e5       	ldi	r26, 0x55	; 85
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e5       	ldi	r30, 0x55	; 85
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#endif


}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <EXI_vInitInt1>:
void EXI_vInitInt1()
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinDir(INT1_PORT,INT1_PIN,DIR_INPUT);
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	63 e0       	ldi	r22, 0x03	; 3
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vSetPinVal(INT1_PORT,INT1_PIN,VAL_HIGH);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT1); //enable INT1
    17a6:	ab e5       	ldi	r26, 0x5B	; 91
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	eb e5       	ldi	r30, 0x5B	; 91
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 68       	ori	r24, 0x80	; 128
    17b2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#elif (INT1_MODE==INT1_RISING_EDGE)
	SET_BIT(MCUCR,ISC10);
	SET_BIT(MCUCR,ISC11);
#elif (INT1_MODE==INT1_ANY_CHANGE)
	SET_BIT(MCUCR,ISC10);
    17b4:	a5 e5       	ldi	r26, 0x55	; 85
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e5       	ldi	r30, 0x55	; 85
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
    17c2:	a5 e5       	ldi	r26, 0x55	; 85
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e5       	ldi	r30, 0x55	; 85
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	87 7f       	andi	r24, 0xF7	; 247
    17ce:	8c 93       	st	X, r24
#endif


}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <EXI_vInitInt2>:
void EXI_vInitInt2()
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinDir(INT2_PORT,INT2_PIN,DIR_INPUT);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vSetPinVal(INT2_PORT,INT2_PIN,VAL_HIGH);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT2); //enable INT2
    17f2:	ab e5       	ldi	r26, 0x5B	; 91
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e5       	ldi	r30, 0x5B	; 91
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 62       	ori	r24, 0x20	; 32
    17fe:	8c 93       	st	X, r24

#if (INT2_MODE==INT2_FALLING_EDGE)
	CLR_BIT(MCUCSR,ISC2);
    1800:	a4 e5       	ldi	r26, 0x54	; 84
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e4 e5       	ldi	r30, 0x54	; 84
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);

#endif


}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <Reg_func0>:

void Reg_func0(void(*Isr_ptr)(void))
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <Reg_func0+0x6>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
	G_ISR_ptr0=Isr_ptr;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	90 93 b9 01 	sts	0x01B9, r25
    182a:	80 93 b8 01 	sts	0x01B8, r24
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <Reg_func1>:

void Reg_func1(void(*Isr_ptr)(void))
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <Reg_func1+0x6>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	G_ISR_ptr1=Isr_ptr;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	90 93 bb 01 	sts	0x01BB, r25
    184e:	80 93 ba 01 	sts	0x01BA, r24
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <Reg_func2>:

void Reg_func2(void(*Isr_ptr)(void))
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <Reg_func2+0x6>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
	G_ISR_ptr2=Isr_ptr;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	90 93 bd 01 	sts	0x01BD, r25
    1872:	80 93 bc 01 	sts	0x01BC, r24
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DIO_vPinDir>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
#include"DIO_reg.h"
#include "DIO_int.h"
void DIO_vPinDir(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Dir)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_vPinDir+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_vPinDir+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02
    1892:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3d 83       	std	Y+5, r19	; 0x05
    189c:	2c 83       	std	Y+4, r18	; 0x04
    189e:	6c 81       	ldd	r22, Y+4	; 0x04
    18a0:	7d 81       	ldd	r23, Y+5	; 0x05
    18a2:	61 30       	cpi	r22, 0x01	; 1
    18a4:	71 05       	cpc	r23, r1
    18a6:	d1 f1       	breq	.+116    	; 0x191c <DIO_vPinDir+0x9c>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	91 05       	cpc	r25, r1
    18b0:	34 f4       	brge	.+12     	; 0x18be <DIO_vPinDir+0x3e>
    18b2:	2c 81       	ldd	r18, Y+4	; 0x04
    18b4:	3d 81       	ldd	r19, Y+5	; 0x05
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <DIO_vPinDir+0x58>
    18bc:	94 c0       	rjmp	.+296    	; 0x19e6 <DIO_vPinDir+0x166>
    18be:	6c 81       	ldd	r22, Y+4	; 0x04
    18c0:	7d 81       	ldd	r23, Y+5	; 0x05
    18c2:	62 30       	cpi	r22, 0x02	; 2
    18c4:	71 05       	cpc	r23, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <DIO_vPinDir+0x4a>
    18c8:	4b c0       	rjmp	.+150    	; 0x1960 <DIO_vPinDir+0xe0>
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <DIO_vPinDir+0x56>
    18d4:	67 c0       	rjmp	.+206    	; 0x19a4 <DIO_vPinDir+0x124>
    18d6:	87 c0       	rjmp	.+270    	; 0x19e6 <DIO_vPinDir+0x166>
	case PORTA_ID:WRT_BIT(DDRA,A_u8PinId,A_u8Dir); break;
    18d8:	aa e3       	ldi	r26, 0x3A	; 58
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ea e3       	ldi	r30, 0x3A	; 58
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_vPinDir+0x74>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_vPinDir+0x70>
    18f8:	80 95       	com	r24
    18fa:	48 23       	and	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	b9 01       	movw	r22, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_vPinDir+0x90>
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_vPinDir+0x8c>
    1914:	cb 01       	movw	r24, r22
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	65 c0       	rjmp	.+202    	; 0x19e6 <DIO_vPinDir+0x166>
	case PORTB_ID:WRT_BIT(DDRB,A_u8PinId,A_u8Dir); break;
    191c:	a7 e3       	ldi	r26, 0x37	; 55
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_vPinDir+0xb8>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	2a 95       	dec	r18
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_vPinDir+0xb4>
    193c:	80 95       	com	r24
    193e:	48 23       	and	r20, r24
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b9 01       	movw	r22, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_vPinDir+0xd4>
    1950:	66 0f       	add	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	8a 95       	dec	r24
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_vPinDir+0xd0>
    1958:	cb 01       	movw	r24, r22
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	43 c0       	rjmp	.+134    	; 0x19e6 <DIO_vPinDir+0x166>
	case PORTC_ID:WRT_BIT(DDRC,A_u8PinId,A_u8Dir); break;
    1960:	a4 e3       	ldi	r26, 0x34	; 52
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e4 e3       	ldi	r30, 0x34	; 52
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_vPinDir+0xfc>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	2a 95       	dec	r18
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_vPinDir+0xf8>
    1980:	80 95       	com	r24
    1982:	48 23       	and	r20, r24
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	b9 01       	movw	r22, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_vPinDir+0x118>
    1994:	66 0f       	add	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_vPinDir+0x114>
    199c:	cb 01       	movw	r24, r22
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	21 c0       	rjmp	.+66     	; 0x19e6 <DIO_vPinDir+0x166>
	case PORTD_ID:WRT_BIT(DDRD,A_u8PinId,A_u8Dir); break;
    19a4:	a1 e3       	ldi	r26, 0x31	; 49
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e1 e3       	ldi	r30, 0x31	; 49
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_vPinDir+0x140>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	2a 95       	dec	r18
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_vPinDir+0x13c>
    19c4:	80 95       	com	r24
    19c6:	48 23       	and	r20, r24
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	b9 01       	movw	r22, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_vPinDir+0x15c>
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_vPinDir+0x158>
    19e0:	cb 01       	movw	r24, r22
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
	}
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <DIO_vSetPinVal>:


void DIO_vSetPinVal(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Val)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <DIO_vSetPinVal+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <DIO_vSetPinVal+0x8>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	6a 83       	std	Y+2, r22	; 0x02
    1a08:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId){
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	6c 81       	ldd	r22, Y+4	; 0x04
    1a16:	7d 81       	ldd	r23, Y+5	; 0x05
    1a18:	61 30       	cpi	r22, 0x01	; 1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	d1 f1       	breq	.+116    	; 0x1a92 <DIO_vSetPinVal+0x9c>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	34 f4       	brge	.+12     	; 0x1a34 <DIO_vSetPinVal+0x3e>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <DIO_vSetPinVal+0x58>
    1a32:	94 c0       	rjmp	.+296    	; 0x1b5c <DIO_vSetPinVal+0x166>
    1a34:	6c 81       	ldd	r22, Y+4	; 0x04
    1a36:	7d 81       	ldd	r23, Y+5	; 0x05
    1a38:	62 30       	cpi	r22, 0x02	; 2
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <DIO_vSetPinVal+0x4a>
    1a3e:	4b c0       	rjmp	.+150    	; 0x1ad6 <DIO_vSetPinVal+0xe0>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <DIO_vSetPinVal+0x56>
    1a4a:	67 c0       	rjmp	.+206    	; 0x1b1a <DIO_vSetPinVal+0x124>
    1a4c:	87 c0       	rjmp	.+270    	; 0x1b5c <DIO_vSetPinVal+0x166>
	case PORTA_ID:WRT_BIT(PORTA,A_u8PinId,A_u8Val); break;
    1a4e:	ab e3       	ldi	r26, 0x3B	; 59
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e3       	ldi	r30, 0x3B	; 59
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_vSetPinVal+0x74>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	2a 95       	dec	r18
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_vSetPinVal+0x70>
    1a6e:	80 95       	com	r24
    1a70:	48 23       	and	r20, r24
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	b9 01       	movw	r22, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_vSetPinVal+0x90>
    1a82:	66 0f       	add	r22, r22
    1a84:	77 1f       	adc	r23, r23
    1a86:	8a 95       	dec	r24
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_vSetPinVal+0x8c>
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	65 c0       	rjmp	.+202    	; 0x1b5c <DIO_vSetPinVal+0x166>
	case PORTB_ID:WRT_BIT(PORTB,A_u8PinId,A_u8Val); break;
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_vSetPinVal+0xb8>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	2a 95       	dec	r18
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_vSetPinVal+0xb4>
    1ab2:	80 95       	com	r24
    1ab4:	48 23       	and	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	b9 01       	movw	r22, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_vSetPinVal+0xd4>
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_vSetPinVal+0xd0>
    1ace:	cb 01       	movw	r24, r22
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	43 c0       	rjmp	.+134    	; 0x1b5c <DIO_vSetPinVal+0x166>
	case PORTC_ID:WRT_BIT(PORTC,A_u8PinId,A_u8Val); break;
    1ad6:	a5 e3       	ldi	r26, 0x35	; 53
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e3       	ldi	r30, 0x35	; 53
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_vSetPinVal+0xfc>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	2a 95       	dec	r18
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_vSetPinVal+0xf8>
    1af6:	80 95       	com	r24
    1af8:	48 23       	and	r20, r24
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	b9 01       	movw	r22, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_vSetPinVal+0x118>
    1b0a:	66 0f       	add	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_vSetPinVal+0x114>
    1b12:	cb 01       	movw	r24, r22
    1b14:	84 2b       	or	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	21 c0       	rjmp	.+66     	; 0x1b5c <DIO_vSetPinVal+0x166>
	case PORTD_ID:WRT_BIT(PORTD,A_u8PinId,A_u8Val); break;
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_vSetPinVal+0x140>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	2a 95       	dec	r18
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_vSetPinVal+0x13c>
    1b3a:	80 95       	com	r24
    1b3c:	48 23       	and	r20, r24
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <DIO_vSetPinVal+0x15c>
    1b4e:	66 0f       	add	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <DIO_vSetPinVal+0x158>
    1b56:	cb 01       	movw	r24, r22
    1b58:	84 2b       	or	r24, r20
    1b5a:	8c 93       	st	X, r24
	}

}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 A_u8PortId,u8 A_u8PinId)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_u8GetPinVal+0x6>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_u8GetPinVal+0x8>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
    1b7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal;
	switch(A_u8PortId){
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3d 83       	std	Y+5, r19	; 0x05
    1b86:	2c 83       	std	Y+4, r18	; 0x04
    1b88:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8c:	41 30       	cpi	r20, 0x01	; 1
    1b8e:	51 05       	cpc	r21, r1
    1b90:	41 f1       	breq	.+80     	; 0x1be2 <DIO_u8GetPinVal+0x76>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	91 05       	cpc	r25, r1
    1b9a:	34 f4       	brge	.+12     	; 0x1ba8 <DIO_u8GetPinVal+0x3c>
    1b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <DIO_u8GetPinVal+0x52>
    1ba6:	52 c0       	rjmp	.+164    	; 0x1c4c <DIO_u8GetPinVal+0xe0>
    1ba8:	4c 81       	ldd	r20, Y+4	; 0x04
    1baa:	5d 81       	ldd	r21, Y+5	; 0x05
    1bac:	42 30       	cpi	r20, 0x02	; 2
    1bae:	51 05       	cpc	r21, r1
    1bb0:	51 f1       	breq	.+84     	; 0x1c06 <DIO_u8GetPinVal+0x9a>
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	b9 f1       	breq	.+110    	; 0x1c2a <DIO_u8GetPinVal+0xbe>
    1bbc:	47 c0       	rjmp	.+142    	; 0x1c4c <DIO_u8GetPinVal+0xe0>
	case PORTA_ID:L_u8PinVal=GET_BIT(PINA,A_u8PinId); break;
    1bbe:	e9 e3       	ldi	r30, 0x39	; 57
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a9 01       	movw	r20, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_u8GetPinVal+0x6a>
    1bd2:	55 95       	asr	r21
    1bd4:	47 95       	ror	r20
    1bd6:	8a 95       	dec	r24
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_u8GetPinVal+0x66>
    1bda:	ca 01       	movw	r24, r20
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	35 c0       	rjmp	.+106    	; 0x1c4c <DIO_u8GetPinVal+0xe0>
	case PORTB_ID:L_u8PinVal=GET_BIT(PINB,A_u8PinId); break;
    1be2:	e6 e3       	ldi	r30, 0x36	; 54
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_u8GetPinVal+0x8e>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_u8GetPinVal+0x8a>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	23 c0       	rjmp	.+70     	; 0x1c4c <DIO_u8GetPinVal+0xe0>
	case PORTC_ID:L_u8PinVal=GET_BIT(PINC,A_u8PinId); break;
    1c06:	e3 e3       	ldi	r30, 0x33	; 51
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_u8GetPinVal+0xb2>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_u8GetPinVal+0xae>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	11 c0       	rjmp	.+34     	; 0x1c4c <DIO_u8GetPinVal+0xe0>
	case PORTD_ID:L_u8PinVal=GET_BIT(PIND,A_u8PinId); break;
    1c2a:	e0 e3       	ldi	r30, 0x30	; 48
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_u8GetPinVal+0xd6>
    1c3e:	55 95       	asr	r21
    1c40:	47 95       	ror	r20
    1c42:	8a 95       	dec	r24
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_u8GetPinVal+0xd2>
    1c46:	ca 01       	movw	r24, r20
    1c48:	81 70       	andi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PinVal;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <DIO_vPortDir>:

void DIO_vPortDir(u8 A_u8PortId, u8 A_u8Dir)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <DIO_vPortDir+0x6>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <DIO_vPortDir+0x8>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 83       	std	Y+4, r19	; 0x04
    1c76:	2b 83       	std	Y+3, r18	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	d1 f0       	breq	.+52     	; 0x1cb6 <DIO_vPortDir+0x58>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <DIO_vPortDir+0x38>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <DIO_vPortDir+0x4e>
    1c94:	1e c0       	rjmp	.+60     	; 0x1cd2 <DIO_vPortDir+0x74>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <DIO_vPortDir+0x62>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <DIO_vPortDir+0x6c>
    1caa:	13 c0       	rjmp	.+38     	; 0x1cd2 <DIO_vPortDir+0x74>
	{
	case PORTA_ID:DDRA=A_u8Dir;break;
    1cac:	ea e3       	ldi	r30, 0x3A	; 58
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <DIO_vPortDir+0x74>
	case PORTB_ID:DDRB=A_u8Dir;break;
    1cb6:	e7 e3       	ldi	r30, 0x37	; 55
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <DIO_vPortDir+0x74>
	case PORTC_ID:DDRC=A_u8Dir;break;
    1cc0:	e4 e3       	ldi	r30, 0x34	; 52
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <DIO_vPortDir+0x74>
	case PORTD_ID:DDRD=A_u8Dir;break;
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	80 83       	st	Z, r24
	}

}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_vSetPortVal>:


void DIO_vSetPortVal(u8 A_u8PortId,u8 A_u8Val)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <DIO_vSetPortVal+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_vSetPortVal+0x8>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3c 83       	std	Y+4, r19	; 0x04
    1cf8:	2b 83       	std	Y+3, r18	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	d1 f0       	breq	.+52     	; 0x1d38 <DIO_vSetPortVal+0x58>
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <DIO_vSetPortVal+0x38>
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <DIO_vSetPortVal+0x4e>
    1d16:	1e c0       	rjmp	.+60     	; 0x1d54 <DIO_vSetPortVal+0x74>
    1d18:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	81 f0       	breq	.+32     	; 0x1d42 <DIO_vSetPortVal+0x62>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	91 05       	cpc	r25, r1
    1d2a:	81 f0       	breq	.+32     	; 0x1d4c <DIO_vSetPortVal+0x6c>
    1d2c:	13 c0       	rjmp	.+38     	; 0x1d54 <DIO_vSetPortVal+0x74>
	{
	case PORTA_ID:PORTA=A_u8Val;break;
    1d2e:	eb e3       	ldi	r30, 0x3B	; 59
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 83       	st	Z, r24
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <DIO_vSetPortVal+0x74>
	case PORTB_ID:PORTB=A_u8Val;break;
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24
    1d40:	09 c0       	rjmp	.+18     	; 0x1d54 <DIO_vSetPortVal+0x74>
	case PORTC_ID:PORTC=A_u8Val;break;
    1d42:	e5 e3       	ldi	r30, 0x35	; 53
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	80 83       	st	Z, r24
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <DIO_vSetPortVal+0x74>
	case PORTD_ID:PORTD=A_u8Val;break;
    1d4c:	e2 e3       	ldi	r30, 0x32	; 50
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	80 83       	st	Z, r24
	}


}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <DIO_vToggelPinVal>:

void DIO_vToggelPinVal(u8 A_u8PortId,u8 A_u8PinId)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <DIO_vToggelPinVal+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <DIO_vToggelPinVal+0x8>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	3c 83       	std	Y+4, r19	; 0x04
    1d7a:	2b 83       	std	Y+3, r18	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	91 05       	cpc	r25, r1
    1d84:	49 f1       	breq	.+82     	; 0x1dd8 <DIO_vToggelPinVal+0x76>
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <DIO_vToggelPinVal+0x38>
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <DIO_vToggelPinVal+0x4e>
    1d98:	5a c0       	rjmp	.+180    	; 0x1e4e <DIO_vToggelPinVal+0xec>
    1d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	71 f1       	breq	.+92     	; 0x1e00 <DIO_vToggelPinVal+0x9e>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	91 05       	cpc	r25, r1
    1dac:	e9 f1       	breq	.+122    	; 0x1e28 <DIO_vToggelPinVal+0xc6>
    1dae:	4f c0       	rjmp	.+158    	; 0x1e4e <DIO_vToggelPinVal+0xec>
	{
	case PORTA_ID:TOG_BIT(PORTA,A_u8PinId);break;
    1db0:	ab e3       	ldi	r26, 0x3B	; 59
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	eb e3       	ldi	r30, 0x3B	; 59
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_vToggelPinVal+0x6c>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_vToggelPinVal+0x68>
    1dd2:	84 27       	eor	r24, r20
    1dd4:	8c 93       	st	X, r24
    1dd6:	3b c0       	rjmp	.+118    	; 0x1e4e <DIO_vToggelPinVal+0xec>
	case PORTB_ID:TOG_BIT(PORTB,A_u8PinId);break;
    1dd8:	a8 e3       	ldi	r26, 0x38	; 56
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <DIO_vToggelPinVal+0x94>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <DIO_vToggelPinVal+0x90>
    1dfa:	84 27       	eor	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	27 c0       	rjmp	.+78     	; 0x1e4e <DIO_vToggelPinVal+0xec>
	case PORTC_ID:TOG_BIT(PORTC,A_u8PinId);break;
    1e00:	a5 e3       	ldi	r26, 0x35	; 53
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e3       	ldi	r30, 0x35	; 53
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_vToggelPinVal+0xbc>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_vToggelPinVal+0xb8>
    1e22:	84 27       	eor	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	13 c0       	rjmp	.+38     	; 0x1e4e <DIO_vToggelPinVal+0xec>
	case PORTD_ID:TOG_BIT(PORTD,A_u8PinId);break;
    1e28:	a2 e3       	ldi	r26, 0x32	; 50
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e2 e3       	ldi	r30, 0x32	; 50
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_vToggelPinVal+0xe4>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_vToggelPinVal+0xe0>
    1e4a:	84 27       	eor	r24, r20
    1e4c:	8c 93       	st	X, r24
	}
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <ADC_vInt>:
#include "ADC_pri.h"
#include "ADC_cfg.h"
#include "ADC_int.h"

void ADC_vInt(void)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
    1e64:	a7 e2       	ldi	r26, 0x27	; 39
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e7 e2       	ldi	r30, 0x27	; 39
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 64       	ori	r24, 0x40	; 64
    1e70:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1); /*Voltage reference AVCC*/
    1e72:	a7 e2       	ldi	r26, 0x27	; 39
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e7 e2       	ldi	r30, 0x27	; 39
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8f 77       	andi	r24, 0x7F	; 127
    1e7e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADLAR);/*Right adjust*/
    1e80:	a7 e2       	ldi	r26, 0x27	; 39
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e7 e2       	ldi	r30, 0x27	; 39
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 7d       	andi	r24, 0xDF	; 223
    1e8c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADATE); /*Disable auto trigger*/
    1e8e:	a6 e2       	ldi	r26, 0x26	; 38
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e6 e2       	ldi	r30, 0x26	; 38
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8f 7d       	andi	r24, 0xDF	; 223
    1e9a:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA&PRESCALER_MASK_BITS)|PRESCALER_MODE; /*Choose Prescaler*/
    1e9c:	a6 e2       	ldi	r26, 0x26	; 38
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e6 e2       	ldi	r30, 0x26	; 38
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	87 60       	ori	r24, 0x07	; 7
    1ea8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);/*Enable ADC*/
    1eaa:	a6 e2       	ldi	r26, 0x26	; 38
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e6 e2       	ldi	r30, 0x26	; 38
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 68       	ori	r24, 0x80	; 128
    1eb6:	8c 93       	st	X, r24

}
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <ADC_u16GetDigValSync>:
u16 ADC_u16GetDigValSync(u8 A_u8ChannelNum)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xE0)|A_u8ChannelNum; /*Choose ADC channel*/
    1eca:	a7 e2       	ldi	r26, 0x27	; 39
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e7 e2       	ldi	r30, 0x27	; 39
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	90 7e       	andi	r25, 0xE0	; 224
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	89 2b       	or	r24, r25
    1edc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);               /*Start Conversion*/
    1ede:	a6 e2       	ldi	r26, 0x26	; 38
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e6 e2       	ldi	r30, 0x26	; 38
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 64       	ori	r24, 0x40	; 64
    1eea:	8c 93       	st	X, r24
	while (GET_BIT(ADCSRA,ADIF) == 0);   /*wait until conversion finishes*/
    1eec:	e6 e2       	ldi	r30, 0x26	; 38
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 95       	swap	r24
    1ef4:	8f 70       	andi	r24, 0x0F	; 15
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	90 70       	andi	r25, 0x00	; 0
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	a9 f3       	breq	.-22     	; 0x1eec <ADC_u16GetDigValSync+0x2e>

return ADCW& 0x03FF; /*return read data*/
    1f02:	e4 e2       	ldi	r30, 0x24	; 36
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	93 70       	andi	r25, 0x03	; 3



}
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <ADC_u16GetDigValAsync>:
void ADC_u16GetDigValAsync(ptr_fun_IvOu16_t ptr_func,u8 A_u8ChannelNum)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <ADC_u16GetDigValAsync+0x6>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	6b 83       	std	Y+3, r22	; 0x03
	G_ISR_ADC=ptr_func; /*save address of app func*/
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	90 93 bf 01 	sts	0x01BF, r25
    1f2e:	80 93 be 01 	sts	0x01BE, r24
	ADMUX=(ADMUX&0xE0)|A_u8ChannelNum;/*Choose ADC channel*/
    1f32:	a7 e2       	ldi	r26, 0x27	; 39
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e7 e2       	ldi	r30, 0x27	; 39
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	90 7e       	andi	r25, 0xE0	; 224
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	89 2b       	or	r24, r25
    1f44:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIE); /*Enable Interrupt of ADC*/
    1f46:	a6 e2       	ldi	r26, 0x26	; 38
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e6 e2       	ldi	r30, 0x26	; 38
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 60       	ori	r24, 0x08	; 8
    1f52:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /*Start Conversion*/
    1f54:	a6 e2       	ldi	r26, 0x26	; 38
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e6 e2       	ldi	r30, 0x26	; 38
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	80 64       	ori	r24, 0x40	; 64
    1f60:	8c 93       	st	X, r24
	while((GET_BIT(ADCSRA,ADSC))==1); /*wait until conversion finishes*/
    1f62:	e6 e2       	ldi	r30, 0x26	; 38
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	82 95       	swap	r24
    1f6a:	86 95       	lsr	r24
    1f6c:	86 95       	lsr	r24
    1f6e:	83 70       	andi	r24, 0x03	; 3
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	90 70       	andi	r25, 0x00	; 0
    1f78:	88 23       	and	r24, r24
    1f7a:	99 f7       	brne	.-26     	; 0x1f62 <ADC_u16GetDigValAsync+0x4e>


}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <__vector_16>:
void __vector_16 (void)
{if (G_ISR_ADC!=ADDRESS_NULL)
    1f88:	1f 92       	push	r1
    1f8a:	0f 92       	push	r0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	0f 92       	push	r0
    1f90:	11 24       	eor	r1, r1
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	80 91 be 01 	lds	r24, 0x01BE
    1fb6:	90 91 bf 01 	lds	r25, 0x01BF
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	89 f0       	breq	.+34     	; 0x1fe0 <__vector_16+0x58>
	{
	G_ISR_ADC(ADCW);
    1fbe:	20 91 be 01 	lds	r18, 0x01BE
    1fc2:	30 91 bf 01 	lds	r19, 0x01BF
    1fc6:	e4 e2       	ldi	r30, 0x24	; 36
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	f9 01       	movw	r30, r18
    1fd0:	09 95       	icall
	CLR_BIT(ADCSRA,ADIE);
    1fd2:	a6 e2       	ldi	r26, 0x26	; 38
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e6 e2       	ldi	r30, 0x26	; 38
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	87 7f       	andi	r24, 0xF7	; 247
    1fde:	8c 93       	st	X, r24
	}
}
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	ff 91       	pop	r31
    1fe6:	ef 91       	pop	r30
    1fe8:	bf 91       	pop	r27
    1fea:	af 91       	pop	r26
    1fec:	9f 91       	pop	r25
    1fee:	8f 91       	pop	r24
    1ff0:	7f 91       	pop	r23
    1ff2:	6f 91       	pop	r22
    1ff4:	5f 91       	pop	r21
    1ff6:	4f 91       	pop	r20
    1ff8:	3f 91       	pop	r19
    1ffa:	2f 91       	pop	r18
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	0f 90       	pop	r0
    2002:	1f 90       	pop	r1
    2004:	18 95       	reti

00002006 <SSD_vINT>:
#include "SSD_int.h"



void SSD_vINT(u8 A_u8SsdId)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <SSD_vINT+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3b 83       	std	Y+3, r19	; 0x03
    201c:	2a 83       	std	Y+2, r18	; 0x02
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	31 f0       	breq	.+12     	; 0x2032 <SSD_vINT+0x2c>
    2026:	2a 81       	ldd	r18, Y+2	; 0x02
    2028:	3b 81       	ldd	r19, Y+3	; 0x03
    202a:	21 30       	cpi	r18, 0x01	; 1
    202c:	31 05       	cpc	r19, r1
    202e:	31 f0       	breq	.+12     	; 0x203c <SSD_vINT+0x36>
    2030:	23 c0       	rjmp	.+70     	; 0x2078 <SSD_vINT+0x72>
	{
	  case SSD0_ID:
		  {        DIO_vPortDir(SSD0_DATA_PORT,PORT_HIGH);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	6f ef       	ldi	r22, 0xFF	; 255
    2036:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_vPortDir>
    203a:	1e c0       	rjmp	.+60     	; 0x2078 <SSD_vINT+0x72>
	               break;

	  case SSD1_ID:
		  {
                  // DIO_vPinDir(SSD1_ENPORT,SSD1_ENPIN,DIR_OUTPUT);
                   DIO_vPinDir(SSD1_DATA_PORT,PIN0_ID,DIR_OUTPUT);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   DIO_vPinDir(SSD1_DATA_PORT,PIN1_ID,DIR_OUTPUT);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   DIO_vPinDir(SSD1_DATA_PORT,PIN2_ID,DIR_OUTPUT);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   DIO_vPinDir(SSD1_DATA_PORT,PIN3_ID,DIR_OUTPUT);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	63 e0       	ldi	r22, 0x03	; 3
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   DIO_vPinDir(SSD1_DATA_PORT,PIN4_ID,DIR_OUTPUT);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	64 e0       	ldi	r22, 0x04	; 4
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   DIO_vPinDir(SSD1_DATA_PORT,PIN5_ID,DIR_OUTPUT);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	65 e0       	ldi	r22, 0x05	; 5
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
                   //SSD_vTurnOff(SSD1_ENPIN);

		  }
                   break;
	}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <SSD_vTurnOn>:
void SSD_vTurnOn(u8 A_u8SsdId)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <SSD_vTurnOn+0x6>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId)
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3b 83       	std	Y+3, r19	; 0x03
    209a:	2a 83       	std	Y+2, r18	; 0x02
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	31 f0       	breq	.+12     	; 0x20b0 <SSD_vTurnOn+0x2c>
    20a4:	2a 81       	ldd	r18, Y+2	; 0x02
    20a6:	3b 81       	ldd	r19, Y+3	; 0x03
    20a8:	21 30       	cpi	r18, 0x01	; 1
    20aa:	31 05       	cpc	r19, r1
    20ac:	39 f0       	breq	.+14     	; 0x20bc <SSD_vTurnOn+0x38>
    20ae:	0b c0       	rjmp	.+22     	; 0x20c6 <SSD_vTurnOn+0x42>
	  {

#if SSD0_MODE==COMMON_CATHODE
		  DIO_vSetPinVal(SSD0_ENPORT,SSD0_ENPIN,VAL_LOW);
#else
		  DIO_vSetPinVal(SSD0_ENPORT,SSD0_ENPIN,VAL_HIGH);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <SSD_vTurnOn+0x42>
  case SSD1_ID:
	  {
#if SSD0_MODE==COMMON_CATHODE
		  DIO_vSetPinVal(SSD1_ENPORT,SSD1_ENPIN,VAL_LOW);
#else
		  DIO_vSetPinVal(SSD1_ENPORT,SSD1_ENPIN,VAL_HIGH);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>

       }
	  break;

 }
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <SSD_vTurnOff>:
void SSD_vTurnOff(u8 A_u8SsdId)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <SSD_vTurnOff+0x6>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId)
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3b 83       	std	Y+3, r19	; 0x03
    20e8:	2a 83       	std	Y+2, r18	; 0x02
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	31 f0       	breq	.+12     	; 0x20fe <SSD_vTurnOff+0x2c>
    20f2:	2a 81       	ldd	r18, Y+2	; 0x02
    20f4:	3b 81       	ldd	r19, Y+3	; 0x03
    20f6:	21 30       	cpi	r18, 0x01	; 1
    20f8:	31 05       	cpc	r19, r1
    20fa:	39 f0       	breq	.+14     	; 0x210a <SSD_vTurnOff+0x38>
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <SSD_vTurnOff+0x42>
	  {

#if SSD0_MODE==COMMON_CATHODE
		  DIO_vSetPinVal(SSD0_ENPORT,SSD0_ENPIN,VAL_HIGH);
#else
		  DIO_vSetPinVal(SSD0_ENPORT,SSD0_ENPIN,VAL_LOW);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <SSD_vTurnOff+0x42>
  case SSD1_ID:
	  {
#if SSD0_MODE==COMMON_CATHODE
		  DIO_vSetPinVal(SSD1_ENPORT,SSD1_ENPIN,VAL_HIGH);
#else
		  DIO_vSetPinVal(SSD1_ENPORT,SSD1_ENPIN,VAL_LOW);
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
#endif

       }
	  break;
}
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <SSD_vDisplayNum>:
void SSD_vDisplayNum(u8 A_u8SsdId,u8 A_u8Num)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <SSD_vDisplayNum+0x6>
    2126:	00 d0       	rcall	.+0      	; 0x2128 <SSD_vDisplayNum+0x8>
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	6a 83       	std	Y+2, r22	; 0x02
			0b01111111,  /*8*/
			0b01101111   /*9*/


	};
	switch(A_u8SsdId)
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3c 83       	std	Y+4, r19	; 0x04
    2138:	2b 83       	std	Y+3, r18	; 0x03
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	31 f0       	breq	.+12     	; 0x214e <SSD_vDisplayNum+0x2e>
    2142:	2b 81       	ldd	r18, Y+3	; 0x03
    2144:	3c 81       	ldd	r19, Y+4	; 0x04
    2146:	21 30       	cpi	r18, 0x01	; 1
    2148:	31 05       	cpc	r19, r1
    214a:	79 f0       	breq	.+30     	; 0x216a <SSD_vDisplayNum+0x4a>
    214c:	1b c0       	rjmp	.+54     	; 0x2184 <SSD_vDisplayNum+0x64>
		  {

	#if SSD0_MODE==COMMON_CATHODE
			  DIO_vSetPortVal(SSD0_DATA_PORT,L_u8SsdDecToSgArr[A_u8Num]);
			  #else
			  DIO_vSetPortVal(SSD0_DATA_PORT,~(L_u8SsdDecToSgArr[A_u8Num]));
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	fc 01       	movw	r30, r24
    2156:	e4 59       	subi	r30, 0x94	; 148
    2158:	fe 4f       	sbci	r31, 0xFE	; 254
    215a:	80 81       	ld	r24, Z
    215c:	98 2f       	mov	r25, r24
    215e:	90 95       	com	r25
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	69 2f       	mov	r22, r25
    2164:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>
    2168:	0d c0       	rjmp	.+26     	; 0x2184 <SSD_vDisplayNum+0x64>


#if SSD1_MODE==COMMON_CATHODE
			  DIO_vSetPortVal(SSD1_DATA_PORT,L_u8SsdDecToSgArr[A_u8Num]);
			  #else
			  DIO_vSetPortVal(SSD1_DATA_PORT,~(L_u8SsdDecToSgArr[A_u8Num]));
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	e4 59       	subi	r30, 0x94	; 148
    2174:	fe 4f       	sbci	r31, 0xFE	; 254
    2176:	80 81       	ld	r24, Z
    2178:	98 2f       	mov	r25, r24
    217a:	90 95       	com	r25
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	69 2f       	mov	r22, r25
    2180:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>

	       }
		  break;
	}

}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <SSD_vDisplaySigmentBorder>:

void SSD_vDisplaySigmentBorder(u8 A_u8SsdId,u8 A_u8Num)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <SSD_vDisplaySigmentBorder+0x6>
    2198:	00 d0       	rcall	.+0      	; 0x219a <SSD_vDisplaySigmentBorder+0x8>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6a 83       	std	Y+2, r22	; 0x02
		    32, /*F1*/
		    1, /*A1*/


	};
	switch(A_u8SsdId)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	3c 83       	std	Y+4, r19	; 0x04
    21aa:	2b 83       	std	Y+3, r18	; 0x03
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	31 f0       	breq	.+12     	; 0x21c0 <SSD_vDisplaySigmentBorder+0x2e>
    21b4:	2b 81       	ldd	r18, Y+3	; 0x03
    21b6:	3c 81       	ldd	r19, Y+4	; 0x04
    21b8:	21 30       	cpi	r18, 0x01	; 1
    21ba:	31 05       	cpc	r19, r1
    21bc:	79 f0       	breq	.+30     	; 0x21dc <SSD_vDisplaySigmentBorder+0x4a>
    21be:	1b c0       	rjmp	.+54     	; 0x21f6 <SSD_vDisplaySigmentBorder+0x64>
		  {

	#if SSD0_MODE==COMMON_CATHODE
			  DIO_vSetPortVal(SSD0_DATA_PORT,L_u8SsdDecToSgArrDigt[A_u8Num]);
			  #else
			  DIO_vSetPortVal(SSD0_DATA_PORT,~(L_u8SsdDecToSgArrDigt[A_u8Num]));
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	fc 01       	movw	r30, r24
    21c8:	ea 58       	subi	r30, 0x8A	; 138
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	80 81       	ld	r24, Z
    21ce:	98 2f       	mov	r25, r24
    21d0:	90 95       	com	r25
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	69 2f       	mov	r22, r25
    21d6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <SSD_vDisplaySigmentBorder+0x64>


#if SSD1_MODE==COMMON_CATHODE
			  DIO_vSetPortVal(SSD1_DATA_PORT,L_u8SsdDecToSgArrDigt[A_u8Num]);
			  #else
			  DIO_vSetPortVal(SSD1_DATA_PORT,~(L_u8SsdDecToSgArrDigt[A_u8Num]));
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	ea 58       	subi	r30, 0x8A	; 138
    21e6:	fe 4f       	sbci	r31, 0xFE	; 254
    21e8:	80 81       	ld	r24, Z
    21ea:	98 2f       	mov	r25, r24
    21ec:	90 95       	com	r25
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	69 2f       	mov	r22, r25
    21f2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>

	       }
		  break;
	}

}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <SSD1_vDisplayNum>:


void SSD1_vDisplayNum(u8 A_u8Num)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01

#if SSD1_MODE==COMMON_CATHODE
			  DIO_vSetPortVal(SSD1_DATA_PORT,L_u8SsdDecToSgArr[A_u8Num]);
			  DIO_vSetPinVal(PORTB_ID,PIN7_ID,L_u8SsdDEcToSgArr1[A_u8Num]);
			  #else
			  DIO_vSetPortVal(SSD1_DATA_PORT,~(L_u8SsdDecToSgArr[A_u8Num]));
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	fc 01       	movw	r30, r24
    2218:	e8 57       	subi	r30, 0x78	; 120
    221a:	fe 4f       	sbci	r31, 0xFE	; 254
    221c:	80 81       	ld	r24, Z
    221e:	98 2f       	mov	r25, r24
    2220:	90 95       	com	r25
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	69 2f       	mov	r22, r25
    2226:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>
			  DIO_vSetPinVal(PORTB_ID,PIN7_ID,L_u8SsdDEcToSgArr1[A_u8Num]);
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	fc 01       	movw	r30, r24
    2232:	e2 58       	subi	r30, 0x82	; 130
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	90 81       	ld	r25, Z
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	67 e0       	ldi	r22, 0x07	; 7
    223c:	49 2f       	mov	r20, r25
    223e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	#endif




}
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <SERVO_vInit>:
#include <util/delay.h>
#include "SERVO_int.h"


void SERVO_vInit(void)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
	TIMER1_vInit();
    2252:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TIMER1_vInit>
}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <SERVO_vRotate180_Back>:

void SERVO_vRotate180_Back(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	60 97       	sbiw	r28, 0x10	; 16
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16TempVariable=650;
    2270:	8a e8       	ldi	r24, 0x8A	; 138
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	98 8b       	std	Y+16, r25	; 0x10
    2276:	8f 87       	std	Y+15, r24	; 0x0f
	TIMER1_vSetICR1(19999);
    2278:	8f e1       	ldi	r24, 0x1F	; 31
    227a:	9e e4       	ldi	r25, 0x4E	; 78
    227c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER1_vSetICR1>
	TIMER1_vTurnOn();
    2280:	0e 94 ad 09 	call	0x135a	; 0x135a <TIMER1_vTurnOn>
    2284:	7b c0       	rjmp	.+246    	; 0x237c <SERVO_vRotate180_Back+0x120>
	for(;L_u16TempVariable<=2500;L_u16TempVariable++)
		{
		TIMER1_vSetOcrA1Val(L_u16TempVariable);
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 89       	ldd	r25, Y+16	; 0x10
    228a:	0e 94 2f 09 	call	0x125e	; 0x125e <TIMER1_vSetOcrA1Val>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e2       	ldi	r26, 0x20	; 32
    2294:	b1 e4       	ldi	r27, 0x41	; 65
    2296:	8b 87       	std	Y+11, r24	; 0x0b
    2298:	9c 87       	std	Y+12, r25	; 0x0c
    229a:	ad 87       	std	Y+13, r26	; 0x0d
    229c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a ef       	ldi	r20, 0xFA	; 250
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	98 87       	std	Y+8, r25	; 0x08
    22ba:	a9 87       	std	Y+9, r26	; 0x09
    22bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <SERVO_vRotate180_Back+0x84>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	3f c0       	rjmp	.+126    	; 0x235e <SERVO_vRotate180_Back+0x102>
	else if (__tmp > 65535)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <SERVO_vRotate180_Back+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <SERVO_vRotate180_Back+0xe4>
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <SERVO_vRotate180_Back+0xd2>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <SERVO_vRotate180_Back+0xc6>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <SERVO_vRotate180_Back+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <SERVO_vRotate180_Back+0x10e>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
void SERVO_vRotate180_Back(void)
{
	u16 L_u16TempVariable=650;
	TIMER1_vSetICR1(19999);
	TIMER1_vTurnOn();
	for(;L_u16TempVariable<=2500;L_u16TempVariable++)
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
    2374:	98 89       	ldd	r25, Y+16	; 0x10
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	98 89       	ldd	r25, Y+16	; 0x10
    2380:	29 e0       	ldi	r18, 0x09	; 9
    2382:	85 3c       	cpi	r24, 0xC5	; 197
    2384:	92 07       	cpc	r25, r18
    2386:	08 f4       	brcc	.+2      	; 0x238a <SERVO_vRotate180_Back+0x12e>
    2388:	7e cf       	rjmp	.-260    	; 0x2286 <SERVO_vRotate180_Back+0x2a>
		{
		TIMER1_vSetOcrA1Val(L_u16TempVariable);
		_delay_ms(10);
		}
	TIMER1_vSetOcrA1Val(650);
    238a:	8a e8       	ldi	r24, 0x8A	; 138
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0e 94 2f 09 	call	0x125e	; 0x125e <TIMER1_vSetOcrA1Val>
}
    2392:	60 96       	adiw	r28, 0x10	; 16
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <SERVO0_vAngle>:
void SERVO0_vAngle(u8 A_u8Angle)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <SERVO0_vAngle+0x6>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <SERVO0_vAngle+0x8>
    23ac:	0f 92       	push	r0
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	8d 83       	std	Y+5, r24	; 0x05
	u16 L_u16OCRA=650+10*A_u8Angle;
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 01       	movw	r18, r24
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	c9 01       	movw	r24, r18
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	82 0f       	add	r24, r18
    23cc:	93 1f       	adc	r25, r19
    23ce:	86 57       	subi	r24, 0x76	; 118
    23d0:	9d 4f       	sbci	r25, 0xFD	; 253
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
	/*if (L_u8OCRA>2500||L_u8OCRA<650)
		L_u8OCRA=650;*/

	u16 L_u16TempVariable=650;
    23d6:	8a e8       	ldi	r24, 0x8A	; 138
    23d8:	92 e0       	ldi	r25, 0x02	; 2
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
		TIMER1_vSetICR1(19999);
    23de:	8f e1       	ldi	r24, 0x1F	; 31
    23e0:	9e e4       	ldi	r25, 0x4E	; 78
    23e2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER1_vSetICR1>
		TIMER1_vTurnOn();
    23e6:	0e 94 ad 09 	call	0x135a	; 0x135a <TIMER1_vTurnOn>

			TIMER1_vSetOcrA1Val(L_u16OCRA);
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	0e 94 2f 09 	call	0x125e	; 0x125e <TIMER1_vSetOcrA1Val>


}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <SERVO1_vAngle>:

void SERVO1_vAngle(u8 A_u8Angle)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	00 d0       	rcall	.+0      	; 0x2408 <SERVO1_vAngle+0x6>
    2408:	00 d0       	rcall	.+0      	; 0x240a <SERVO1_vAngle+0x8>
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	8d 83       	std	Y+5, r24	; 0x05
	u16 L_u16OCRB=650+10*A_u8Angle;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9c 01       	movw	r18, r24
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	c9 01       	movw	r24, r18
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	82 0f       	add	r24, r18
    242a:	93 1f       	adc	r25, r19
    242c:	86 57       	subi	r24, 0x76	; 118
    242e:	9d 4f       	sbci	r25, 0xFD	; 253
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
		/*if (L_u8OCRA>2500||L_u8OCRA<650)
			L_u8OCRA=650;*/

		u16 L_u16TempVariable=650;
    2434:	8a e8       	ldi	r24, 0x8A	; 138
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
			TIMER1_vSetICR1(19999);
    243c:	8f e1       	ldi	r24, 0x1F	; 31
    243e:	9e e4       	ldi	r25, 0x4E	; 78
    2440:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER1_vSetICR1>
			TIMER1_vTurnOn();
    2444:	0e 94 ad 09 	call	0x135a	; 0x135a <TIMER1_vTurnOn>

				TIMER1_vSetOcrB1Val(L_u16OCRB);
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	0e 94 41 09 	call	0x1282	; 0x1282 <TIMER1_vSetOcrB1Val>
}
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LED_vInt>:
#include "LED_cfg.h"
#include"LED_int.h"


void LED_vInt(u8 A_u8LedId)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <LED_vInt+0x6>
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId)
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	3b 83       	std	Y+3, r19	; 0x03
    2476:	2a 83       	std	Y+2, r18	; 0x02
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	91 05       	cpc	r25, r1
    2480:	d9 f1       	breq	.+118    	; 0x24f8 <LED_vInt+0x98>
    2482:	2a 81       	ldd	r18, Y+2	; 0x02
    2484:	3b 81       	ldd	r19, Y+3	; 0x03
    2486:	24 30       	cpi	r18, 0x04	; 4
    2488:	31 05       	cpc	r19, r1
    248a:	7c f4       	brge	.+30     	; 0x24aa <LED_vInt+0x4a>
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	29 f1       	breq	.+74     	; 0x24e0 <LED_vInt+0x80>
    2496:	2a 81       	ldd	r18, Y+2	; 0x02
    2498:	3b 81       	ldd	r19, Y+3	; 0x03
    249a:	22 30       	cpi	r18, 0x02	; 2
    249c:	31 05       	cpc	r19, r1
    249e:	34 f5       	brge	.+76     	; 0x24ec <LED_vInt+0x8c>
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	b1 f0       	breq	.+44     	; 0x24d4 <LED_vInt+0x74>
    24a8:	44 c0       	rjmp	.+136    	; 0x2532 <LED_vInt+0xd2>
    24aa:	2a 81       	ldd	r18, Y+2	; 0x02
    24ac:	3b 81       	ldd	r19, Y+3	; 0x03
    24ae:	25 30       	cpi	r18, 0x05	; 5
    24b0:	31 05       	cpc	r19, r1
    24b2:	71 f1       	breq	.+92     	; 0x2510 <LED_vInt+0xb0>
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	85 30       	cpi	r24, 0x05	; 5
    24ba:	91 05       	cpc	r25, r1
    24bc:	1c f1       	brlt	.+70     	; 0x2504 <LED_vInt+0xa4>
    24be:	2a 81       	ldd	r18, Y+2	; 0x02
    24c0:	3b 81       	ldd	r19, Y+3	; 0x03
    24c2:	26 30       	cpi	r18, 0x06	; 6
    24c4:	31 05       	cpc	r19, r1
    24c6:	51 f1       	breq	.+84     	; 0x251c <LED_vInt+0xbc>
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	87 30       	cpi	r24, 0x07	; 7
    24ce:	91 05       	cpc	r25, r1
    24d0:	59 f1       	breq	.+86     	; 0x2528 <LED_vInt+0xc8>
    24d2:	2f c0       	rjmp	.+94     	; 0x2532 <LED_vInt+0xd2>
		{
		 case LED0_ID:DIO_vPinDir(LED0_PORT,LED0_ID,DIR_OUTPUT);break;
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    24de:	29 c0       	rjmp	.+82     	; 0x2532 <LED_vInt+0xd2>
		 case LED1_ID:DIO_vPinDir(LED1_PORT,LED1_ID,DIR_OUTPUT);break;
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    24ea:	23 c0       	rjmp	.+70     	; 0x2532 <LED_vInt+0xd2>
		 case LED2_ID:DIO_vPinDir(LED2_PORT,LED2_ID,DIR_OUTPUT);break;
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    24f6:	1d c0       	rjmp	.+58     	; 0x2532 <LED_vInt+0xd2>
		 case LED3_ID:DIO_vPinDir(LED3_PORT,LED3_ID,DIR_OUTPUT);break;
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	63 e0       	ldi	r22, 0x03	; 3
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    2502:	17 c0       	rjmp	.+46     	; 0x2532 <LED_vInt+0xd2>
		 case LED4_ID:DIO_vPinDir(LED4_PORT,LED4_ID,DIR_OUTPUT);break;
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	64 e0       	ldi	r22, 0x04	; 4
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    250e:	11 c0       	rjmp	.+34     	; 0x2532 <LED_vInt+0xd2>
		 case LED5_ID:DIO_vPinDir(LED5_PORT,LED5_ID,DIR_OUTPUT);break;
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	65 e0       	ldi	r22, 0x05	; 5
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <LED_vInt+0xd2>
		 case LED6_ID:DIO_vPinDir(LED6_PORT,LED6_ID,DIR_OUTPUT);break;
    251c:	83 e0       	ldi	r24, 0x03	; 3
    251e:	66 e0       	ldi	r22, 0x06	; 6
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <LED_vInt+0xd2>
		 case LED7_ID:DIO_vPinDir(LED7_PORT,LED7_ID,DIR_OUTPUT);break;
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	67 e0       	ldi	r22, 0x07	; 7
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>

		}

}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <LED_vTurnOn>:




void LED_vTurnOn(u8 A_u8LedId)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <LED_vTurnOn+0x6>
    2544:	0f 92       	push	r0
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId)
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3b 83       	std	Y+3, r19	; 0x03
    2554:	2a 83       	std	Y+2, r18	; 0x02
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	83 30       	cpi	r24, 0x03	; 3
    255c:	91 05       	cpc	r25, r1
    255e:	d9 f1       	breq	.+118    	; 0x25d6 <LED_vTurnOn+0x98>
    2560:	2a 81       	ldd	r18, Y+2	; 0x02
    2562:	3b 81       	ldd	r19, Y+3	; 0x03
    2564:	24 30       	cpi	r18, 0x04	; 4
    2566:	31 05       	cpc	r19, r1
    2568:	7c f4       	brge	.+30     	; 0x2588 <LED_vTurnOn+0x4a>
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	91 05       	cpc	r25, r1
    2572:	29 f1       	breq	.+74     	; 0x25be <LED_vTurnOn+0x80>
    2574:	2a 81       	ldd	r18, Y+2	; 0x02
    2576:	3b 81       	ldd	r19, Y+3	; 0x03
    2578:	22 30       	cpi	r18, 0x02	; 2
    257a:	31 05       	cpc	r19, r1
    257c:	34 f5       	brge	.+76     	; 0x25ca <LED_vTurnOn+0x8c>
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	9b 81       	ldd	r25, Y+3	; 0x03
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	b1 f0       	breq	.+44     	; 0x25b2 <LED_vTurnOn+0x74>
    2586:	44 c0       	rjmp	.+136    	; 0x2610 <LED_vTurnOn+0xd2>
    2588:	2a 81       	ldd	r18, Y+2	; 0x02
    258a:	3b 81       	ldd	r19, Y+3	; 0x03
    258c:	25 30       	cpi	r18, 0x05	; 5
    258e:	31 05       	cpc	r19, r1
    2590:	71 f1       	breq	.+92     	; 0x25ee <LED_vTurnOn+0xb0>
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	85 30       	cpi	r24, 0x05	; 5
    2598:	91 05       	cpc	r25, r1
    259a:	1c f1       	brlt	.+70     	; 0x25e2 <LED_vTurnOn+0xa4>
    259c:	2a 81       	ldd	r18, Y+2	; 0x02
    259e:	3b 81       	ldd	r19, Y+3	; 0x03
    25a0:	26 30       	cpi	r18, 0x06	; 6
    25a2:	31 05       	cpc	r19, r1
    25a4:	51 f1       	breq	.+84     	; 0x25fa <LED_vTurnOn+0xbc>
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	87 30       	cpi	r24, 0x07	; 7
    25ac:	91 05       	cpc	r25, r1
    25ae:	59 f1       	breq	.+86     	; 0x2606 <LED_vTurnOn+0xc8>
    25b0:	2f c0       	rjmp	.+94     	; 0x2610 <LED_vTurnOn+0xd2>
	{
	case LED0_ID:DIO_vSetPinVal(LED0_PORT,LED0_ID,VAL_HIGH);break;
    25b2:	83 e0       	ldi	r24, 0x03	; 3
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25bc:	29 c0       	rjmp	.+82     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED1_ID:DIO_vSetPinVal(LED1_PORT,LED1_ID,VAL_HIGH);break;
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25c8:	23 c0       	rjmp	.+70     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED2_ID:DIO_vSetPinVal(LED2_PORT,LED2_ID,VAL_HIGH);break;
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	62 e0       	ldi	r22, 0x02	; 2
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25d4:	1d c0       	rjmp	.+58     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED3_ID:DIO_vSetPinVal(LED3_PORT,LED3_ID,VAL_HIGH);break;
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	63 e0       	ldi	r22, 0x03	; 3
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25e0:	17 c0       	rjmp	.+46     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED4_ID:DIO_vSetPinVal(LED4_PORT,LED4_ID,VAL_HIGH);break;
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	64 e0       	ldi	r22, 0x04	; 4
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25ec:	11 c0       	rjmp	.+34     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED5_ID:DIO_vSetPinVal(LED5_PORT,LED5_ID,VAL_HIGH);break;
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	65 e0       	ldi	r22, 0x05	; 5
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED6_ID:DIO_vSetPinVal(LED6_PORT,LED6_ID,VAL_HIGH);break;
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	66 e0       	ldi	r22, 0x06	; 6
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    2604:	05 c0       	rjmp	.+10     	; 0x2610 <LED_vTurnOn+0xd2>
	case LED7_ID:DIO_vSetPinVal(LED7_PORT,LED7_ID,VAL_HIGH);break;
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	67 e0       	ldi	r22, 0x07	; 7
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>

	}

}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LED_vTurnOff>:

void LED_vTurnOff(u8 A_u8LedId)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <LED_vTurnOff+0x6>
    2622:	0f 92       	push	r0
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId)
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	3b 83       	std	Y+3, r19	; 0x03
    2632:	2a 83       	std	Y+2, r18	; 0x02
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	9b 81       	ldd	r25, Y+3	; 0x03
    2638:	83 30       	cpi	r24, 0x03	; 3
    263a:	91 05       	cpc	r25, r1
    263c:	d9 f1       	breq	.+118    	; 0x26b4 <LED_vTurnOff+0x98>
    263e:	2a 81       	ldd	r18, Y+2	; 0x02
    2640:	3b 81       	ldd	r19, Y+3	; 0x03
    2642:	24 30       	cpi	r18, 0x04	; 4
    2644:	31 05       	cpc	r19, r1
    2646:	7c f4       	brge	.+30     	; 0x2666 <LED_vTurnOff+0x4a>
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	29 f1       	breq	.+74     	; 0x269c <LED_vTurnOff+0x80>
    2652:	2a 81       	ldd	r18, Y+2	; 0x02
    2654:	3b 81       	ldd	r19, Y+3	; 0x03
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	34 f5       	brge	.+76     	; 0x26a8 <LED_vTurnOff+0x8c>
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	9b 81       	ldd	r25, Y+3	; 0x03
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	b1 f0       	breq	.+44     	; 0x2690 <LED_vTurnOff+0x74>
    2664:	44 c0       	rjmp	.+136    	; 0x26ee <LED_vTurnOff+0xd2>
    2666:	2a 81       	ldd	r18, Y+2	; 0x02
    2668:	3b 81       	ldd	r19, Y+3	; 0x03
    266a:	25 30       	cpi	r18, 0x05	; 5
    266c:	31 05       	cpc	r19, r1
    266e:	71 f1       	breq	.+92     	; 0x26cc <LED_vTurnOff+0xb0>
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	9b 81       	ldd	r25, Y+3	; 0x03
    2674:	85 30       	cpi	r24, 0x05	; 5
    2676:	91 05       	cpc	r25, r1
    2678:	1c f1       	brlt	.+70     	; 0x26c0 <LED_vTurnOff+0xa4>
    267a:	2a 81       	ldd	r18, Y+2	; 0x02
    267c:	3b 81       	ldd	r19, Y+3	; 0x03
    267e:	26 30       	cpi	r18, 0x06	; 6
    2680:	31 05       	cpc	r19, r1
    2682:	51 f1       	breq	.+84     	; 0x26d8 <LED_vTurnOff+0xbc>
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	87 30       	cpi	r24, 0x07	; 7
    268a:	91 05       	cpc	r25, r1
    268c:	59 f1       	breq	.+86     	; 0x26e4 <LED_vTurnOff+0xc8>
    268e:	2f c0       	rjmp	.+94     	; 0x26ee <LED_vTurnOff+0xd2>
		{
		case LED0_ID:DIO_vSetPinVal(LED0_PORT,LED0_ID,VAL_LOW);break;
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    269a:	29 c0       	rjmp	.+82     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED1_ID:DIO_vSetPinVal(LED1_PORT,LED1_ID,VAL_LOW);break;
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26a6:	23 c0       	rjmp	.+70     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED2_ID:DIO_vSetPinVal(LED2_PORT,LED2_ID,VAL_LOW);break;
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26b2:	1d c0       	rjmp	.+58     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED3_ID:DIO_vSetPinVal(LED3_PORT,LED3_ID,VAL_LOW);break;
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	63 e0       	ldi	r22, 0x03	; 3
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26be:	17 c0       	rjmp	.+46     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED4_ID:DIO_vSetPinVal(LED4_PORT,LED4_ID,VAL_LOW);break;
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	64 e0       	ldi	r22, 0x04	; 4
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26ca:	11 c0       	rjmp	.+34     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED5_ID:DIO_vSetPinVal(LED5_PORT,LED5_ID,VAL_LOW);break;
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	65 e0       	ldi	r22, 0x05	; 5
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26d6:	0b c0       	rjmp	.+22     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED6_ID:DIO_vSetPinVal(LED6_PORT,LED6_ID,VAL_LOW);break;
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	66 e0       	ldi	r22, 0x06	; 6
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <LED_vTurnOff+0xd2>
		case LED7_ID:DIO_vSetPinVal(LED7_PORT,LED7_ID,VAL_LOW);break;
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	67 e0       	ldi	r22, 0x07	; 7
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>

		}

}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <LED_vPortDir>:

void LED_vPortDir(u8 A_u8Val)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	0f 92       	push	r0
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	89 83       	std	Y+1, r24	; 0x01
	DIO_vPortDir(LEDS_PORT,A_u8Val);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	69 81       	ldd	r22, Y+1	; 0x01
    270a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_vPortDir>
}
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <LED_vSetPortVal>:
void LED_vSetPortVal(u8 A_u8Val)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortVal(LEDS_PORT,A_u8Val);
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	69 81       	ldd	r22, Y+1	; 0x01
    2726:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_vSetPortVal>

}
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LED_vToggelPinVal>:
void LED_vToggelPinVal(u8 A_u8PortId,u8 A_u8LedId)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <LED_vToggelPinVal+0x6>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vToggelPinVal( A_u8PortId, A_u8LedId);
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	6a 81       	ldd	r22, Y+2	; 0x02
    2744:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <DIO_vToggelPinVal>
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LDR_vInt>:
#include"LDR_pri.h"
#include "LDR_cfg.h"
#include "LDR_int.h"

void LDR_vInt()
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	ADC_vInt();
    275a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <ADC_vInt>
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <LDR_u16GetLDR_Res>:
u16 LDR_u16GetLDR_Res(u8 A_u8PinNum)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <LDR_u16GetLDR_Res+0x6>
    276a:	00 d0       	rcall	.+0      	; 0x276c <LDR_u16GetLDR_Res+0x8>
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8d 83       	std	Y+5, r24	; 0x05
	u16 L_u16Vout=ADC_u16GetDigValSync(A_u8PinNum);
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_u16GetDigValSync>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
	u16 L_u16LDR_Res= LDR_RES(L_u16Vout);
    277e:	2b 81       	ldd	r18, Y+3	; 0x03
    2780:	3c 81       	ldd	r19, Y+4	; 0x04
    2782:	8c ee       	ldi	r24, 0xEC	; 236
    2784:	93 e1       	ldi	r25, 0x13	; 19
    2786:	a9 01       	movw	r20, r18
    2788:	48 9f       	mul	r20, r24
    278a:	90 01       	movw	r18, r0
    278c:	49 9f       	mul	r20, r25
    278e:	30 0d       	add	r19, r0
    2790:	58 9f       	mul	r21, r24
    2792:	30 0d       	add	r19, r0
    2794:	11 24       	eor	r1, r1
    2796:	8c e9       	ldi	r24, 0x9C	; 156
    2798:	93 e6       	ldi	r25, 0x63	; 99
    279a:	82 1b       	sub	r24, r18
    279c:	93 0b       	sbc	r25, r19
    279e:	2b 81       	ldd	r18, Y+3	; 0x03
    27a0:	3c 81       	ldd	r19, Y+4	; 0x04
    27a2:	b9 01       	movw	r22, r18
    27a4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__udivmodhi4>
    27a8:	cb 01       	movw	r24, r22
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
	return L_u16LDR_Res;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <LCD_vInit>:
#include "LCD_cfg.h"
#include "LCD_int.h"
#include<util/delay.h>

void LCD_vInit()
{
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	cc 54       	subi	r28, 0x4C	; 76
    27d0:	d0 40       	sbci	r29, 0x00	; 0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	fe 01       	movw	r30, r28
    27de:	e7 5b       	subi	r30, 0xB7	; 183
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 ef       	ldi	r26, 0xF0	; 240
    27e8:	b1 e4       	ldi	r27, 0x41	; 65
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	8e 01       	movw	r16, r28
    27f4:	0b 5b       	subi	r16, 0xBB	; 187
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5b       	subi	r30, 0xB7	; 183
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2820:	fe 01       	movw	r30, r28
    2822:	eb 5b       	subi	r30, 0xBB	; 187
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	44 f4       	brge	.+16     	; 0x284e <LCD_vInit+0x8c>
		__ticks = 1;
    283e:	fe 01       	movw	r30, r28
    2840:	ed 5b       	subi	r30, 0xBD	; 189
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	64 c0       	rjmp	.+200    	; 0x2916 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    284e:	fe 01       	movw	r30, r28
    2850:	eb 5b       	subi	r30, 0xBB	; 187
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	0c f0       	brlt	.+2      	; 0x286e <LCD_vInit+0xac>
    286c:	43 c0       	rjmp	.+134    	; 0x28f4 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	fe 01       	movw	r30, r28
    2870:	e7 5b       	subi	r30, 0xB7	; 183
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8e 01       	movw	r16, r28
    288e:	0d 5b       	subi	r16, 0xBD	; 189
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	f8 01       	movw	r30, r16
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
    28a4:	1f c0       	rjmp	.+62     	; 0x28e4 <LCD_vInit+0x122>
    28a6:	fe 01       	movw	r30, r28
    28a8:	ef 5b       	subi	r30, 0xBF	; 191
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	fe 01       	movw	r30, r28
    28b6:	ef 5b       	subi	r30, 0xBF	; 191
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_vInit+0xfc>
    28c2:	fe 01       	movw	r30, r28
    28c4:	ef 5b       	subi	r30, 0xBF	; 191
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	de 01       	movw	r26, r28
    28ce:	ad 5b       	subi	r26, 0xBD	; 189
    28d0:	bf 4f       	sbci	r27, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 5b       	subi	r30, 0xBD	; 189
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	11 96       	adiw	r26, 0x01	; 1
    28e0:	9c 93       	st	X, r25
    28e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	fe 01       	movw	r30, r28
    28e6:	ed 5b       	subi	r30, 0xBD	; 189
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	d1 f6       	brne	.-76     	; 0x28a6 <LCD_vInit+0xe4>
    28f2:	24 c0       	rjmp	.+72     	; 0x293c <LCD_vInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f4:	8e 01       	movw	r16, r28
    28f6:	0d 5b       	subi	r16, 0xBD	; 189
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	eb 5b       	subi	r30, 0xBB	; 187
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	f8 01       	movw	r30, r16
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
    2916:	fe 01       	movw	r30, r28
    2918:	ed 5b       	subi	r30, 0xBD	; 189
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	fe 01       	movw	r30, r28
    2922:	ff 96       	adiw	r30, 0x3f	; 63
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	fe 01       	movw	r30, r28
    292a:	ff 96       	adiw	r30, 0x3f	; 63
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_vInit+0x16e>
    2934:	fe 01       	movw	r30, r28
    2936:	ff 96       	adiw	r30, 0x3f	; 63
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
	LCD_vInstruction(CMD_CLR);/*Command to clear display*/
	_delay_ms(1.53);
	LCD_vInstruction(CMD_ENTRY_MODE_INC);/*Command to increament cursor*/

#else /*4Bit mode*/
	DIO_vPinDir(EN_PORT, EN_PIN, DIR_OUTPUT);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	62 e0       	ldi	r22, 0x02	; 2
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(RW_PORT, RW_PIN, DIR_OUTPUT);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(RS_PORT, RS_PIN, DIR_OUTPUT);
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>

	DIO_vPinDir(DATA_PORT, LCD_D4_ID, DIR_OUTPUT);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	64 e0       	ldi	r22, 0x04	; 4
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(DATA_PORT, LCD_D5_ID, DIR_OUTPUT);
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	65 e0       	ldi	r22, 0x05	; 5
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(DATA_PORT, LCD_D6_ID, DIR_OUTPUT);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	66 e0       	ldi	r22, 0x06	; 6
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
	DIO_vPinDir(DATA_PORT, LCD_D7_ID, DIR_OUTPUT);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	67 e0       	ldi	r22, 0x07	; 7
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>


	DIO_vSetPinVal(RS_PORT, RS_PIN, VAL_LOW);/*Choosing the instruction register*/
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(RW_PORT, RW_PIN, VAL_LOW);/*Writing to the LCD*/
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_HIGH);/*set the En high to make LCD read*/
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	62 e0       	ldi	r22, 0x02	; 2
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(DATA_PORT, LCD_D4_ID, VAL_LOW);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	64 e0       	ldi	r22, 0x04	; 4
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(DATA_PORT, LCD_D5_ID, VAL_HIGH);
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	65 e0       	ldi	r22, 0x05	; 5
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(DATA_PORT, LCD_D6_ID, VAL_LOW);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	66 e0       	ldi	r22, 0x06	; 6
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(DATA_PORT, LCD_D7_ID, VAL_LOW);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	67 e0       	ldi	r22, 0x07	; 7
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
	DIO_vSetPinVal(EN_PORT,EN_PIN, VAL_LOW);/*set the En high to make LCD read*/
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>

	LCD_vInstruction(CMD_4BIT_MODE);/*Command to set 4bit mode, 2x16 lines, 5x7dots*/
    29d2:	88 e2       	ldi	r24, 0x28	; 40
    29d4:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	ac e1       	ldi	r26, 0x1C	; 28
    29de:	b2 e4       	ldi	r27, 0x42	; 66
    29e0:	8b af       	std	Y+59, r24	; 0x3b
    29e2:	9c af       	std	Y+60, r25	; 0x3c
    29e4:	ad af       	std	Y+61, r26	; 0x3d
    29e6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    29ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    29ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    29f0:	2b ea       	ldi	r18, 0xAB	; 171
    29f2:	3a ea       	ldi	r19, 0xAA	; 170
    29f4:	4a e2       	ldi	r20, 0x2A	; 42
    29f6:	50 e4       	ldi	r21, 0x40	; 64
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8f ab       	std	Y+55, r24	; 0x37
    2a02:	98 af       	std	Y+56, r25	; 0x38
    2a04:	a9 af       	std	Y+57, r26	; 0x39
    2a06:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a08:	6f a9       	ldd	r22, Y+55	; 0x37
    2a0a:	78 ad       	ldd	r23, Y+56	; 0x38
    2a0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	1c f4       	brge	.+6      	; 0x2a26 <LCD_vInit+0x264>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	8e ab       	std	Y+54, r24	; 0x36
    2a24:	91 c0       	rjmp	.+290    	; 0x2b48 <LCD_vInit+0x386>
	else if (__tmp > 255)
    2a26:	6f a9       	ldd	r22, Y+55	; 0x37
    2a28:	78 ad       	ldd	r23, Y+56	; 0x38
    2a2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	53 e4       	ldi	r21, 0x43	; 67
    2a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	0c f0       	brlt	.+2      	; 0x2a40 <LCD_vInit+0x27e>
    2a3e:	7b c0       	rjmp	.+246    	; 0x2b36 <LCD_vInit+0x374>
	{
		_delay_ms(__us / 1000.0);
    2a40:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a42:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a44:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a46:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a e7       	ldi	r20, 0x7A	; 122
    2a4e:	54 e4       	ldi	r21, 0x44	; 68
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8a ab       	std	Y+50, r24	; 0x32
    2a5a:	9b ab       	std	Y+51, r25	; 0x33
    2a5c:	ac ab       	std	Y+52, r26	; 0x34
    2a5e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	6a a9       	ldd	r22, Y+50	; 0x32
    2a62:	7b a9       	ldd	r23, Y+51	; 0x33
    2a64:	8c a9       	ldd	r24, Y+52	; 0x34
    2a66:	9d a9       	ldd	r25, Y+53	; 0x35
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a ef       	ldi	r20, 0xFA	; 250
    2a6e:	54 e4       	ldi	r21, 0x44	; 68
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8e a7       	std	Y+46, r24	; 0x2e
    2a7a:	9f a7       	std	Y+47, r25	; 0x2f
    2a7c:	a8 ab       	std	Y+48, r26	; 0x30
    2a7e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2a80:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a82:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a84:	88 a9       	ldd	r24, Y+48	; 0x30
    2a86:	99 a9       	ldd	r25, Y+49	; 0x31
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <LCD_vInit+0x2e0>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9d a7       	std	Y+45, r25	; 0x2d
    2a9e:	8c a7       	std	Y+44, r24	; 0x2c
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <LCD_vInit+0x35e>
	else if (__tmp > 65535)
    2aa2:	6e a5       	ldd	r22, Y+46	; 0x2e
    2aa4:	7f a5       	ldd	r23, Y+47	; 0x2f
    2aa6:	88 a9       	ldd	r24, Y+48	; 0x30
    2aa8:	99 a9       	ldd	r25, Y+49	; 0x31
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <LCD_vInit+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	6a a9       	ldd	r22, Y+50	; 0x32
    2abc:	7b a9       	ldd	r23, Y+51	; 0x33
    2abe:	8c a9       	ldd	r24, Y+52	; 0x34
    2ac0:	9d a9       	ldd	r25, Y+53	; 0x35
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9d a7       	std	Y+45, r25	; 0x2d
    2ae0:	8c a7       	std	Y+44, r24	; 0x2c
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <LCD_vInit+0x340>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9b a7       	std	Y+43, r25	; 0x2b
    2aea:	8a a7       	std	Y+42, r24	; 0x2a
    2aec:	8a a5       	ldd	r24, Y+42	; 0x2a
    2aee:	9b a5       	ldd	r25, Y+43	; 0x2b
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_vInit+0x32e>
    2af4:	9b a7       	std	Y+43, r25	; 0x2b
    2af6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8c a5       	ldd	r24, Y+44	; 0x2c
    2afa:	9d a5       	ldd	r25, Y+45	; 0x2d
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9d a7       	std	Y+45, r25	; 0x2d
    2b00:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b04:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <LCD_vInit+0x322>
    2b0a:	24 c0       	rjmp	.+72     	; 0x2b54 <LCD_vInit+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b0e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b10:	88 a9       	ldd	r24, Y+48	; 0x30
    2b12:	99 a9       	ldd	r25, Y+49	; 0x31
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9d a7       	std	Y+45, r25	; 0x2d
    2b1e:	8c a7       	std	Y+44, r24	; 0x2c
    2b20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b22:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b24:	99 a7       	std	Y+41, r25	; 0x29
    2b26:	88 a7       	std	Y+40, r24	; 0x28
    2b28:	88 a5       	ldd	r24, Y+40	; 0x28
    2b2a:	99 a5       	ldd	r25, Y+41	; 0x29
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_vInit+0x36a>
    2b30:	99 a7       	std	Y+41, r25	; 0x29
    2b32:	88 a7       	std	Y+40, r24	; 0x28
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <LCD_vInit+0x392>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b36:	6f a9       	ldd	r22, Y+55	; 0x37
    2b38:	78 ad       	ldd	r23, Y+56	; 0x38
    2b3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8e ab       	std	Y+54, r24	; 0x36
    2b48:	8e a9       	ldd	r24, Y+54	; 0x36
    2b4a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b4c:	8f a1       	ldd	r24, Y+39	; 0x27
    2b4e:	8a 95       	dec	r24
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <LCD_vInit+0x38c>
    2b52:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(39);
	LCD_vInstruction(CMD_DISPLAY_ON);/*Command to set the display ON*/
    2b54:	8c e0       	ldi	r24, 0x0C	; 12
    2b56:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	ac e1       	ldi	r26, 0x1C	; 28
    2b60:	b2 e4       	ldi	r27, 0x42	; 66
    2b62:	8b a3       	std	Y+35, r24	; 0x23
    2b64:	9c a3       	std	Y+36, r25	; 0x24
    2b66:	ad a3       	std	Y+37, r26	; 0x25
    2b68:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b70:	9e a1       	ldd	r25, Y+38	; 0x26
    2b72:	2b ea       	ldi	r18, 0xAB	; 171
    2b74:	3a ea       	ldi	r19, 0xAA	; 170
    2b76:	4a e2       	ldi	r20, 0x2A	; 42
    2b78:	50 e4       	ldi	r21, 0x40	; 64
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8f 8f       	std	Y+31, r24	; 0x1f
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	a9 a3       	std	Y+33, r26	; 0x21
    2b88:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2b8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b8c:	78 a1       	ldd	r23, Y+32	; 0x20
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	9a a1       	ldd	r25, Y+34	; 0x22
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	1c f4       	brge	.+6      	; 0x2ba8 <LCD_vInit+0x3e6>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ba6:	91 c0       	rjmp	.+290    	; 0x2cca <LCD_vInit+0x508>
	else if (__tmp > 255)
    2ba8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2baa:	78 a1       	ldd	r23, Y+32	; 0x20
    2bac:	89 a1       	ldd	r24, Y+33	; 0x21
    2bae:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	53 e4       	ldi	r21, 0x43	; 67
    2bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <LCD_vInit+0x400>
    2bc0:	7b c0       	rjmp	.+246    	; 0x2cb8 <LCD_vInit+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    2bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	54 e4       	ldi	r21, 0x44	; 68
    2bd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8a 8f       	std	Y+26, r24	; 0x1a
    2bdc:	9b 8f       	std	Y+27, r25	; 0x1b
    2bde:	ac 8f       	std	Y+28, r26	; 0x1c
    2be0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2be4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2be6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2be8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8e 8b       	std	Y+22, r24	; 0x16
    2bfc:	9f 8b       	std	Y+23, r25	; 0x17
    2bfe:	a8 8f       	std	Y+24, r26	; 0x18
    2c00:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c02:	6e 89       	ldd	r22, Y+22	; 0x16
    2c04:	7f 89       	ldd	r23, Y+23	; 0x17
    2c06:	88 8d       	ldd	r24, Y+24	; 0x18
    2c08:	99 8d       	ldd	r25, Y+25	; 0x19
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <LCD_vInit+0x462>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9d 8b       	std	Y+21, r25	; 0x15
    2c20:	8c 8b       	std	Y+20, r24	; 0x14
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <LCD_vInit+0x4e0>
	else if (__tmp > 65535)
    2c24:	6e 89       	ldd	r22, Y+22	; 0x16
    2c26:	7f 89       	ldd	r23, Y+23	; 0x17
    2c28:	88 8d       	ldd	r24, Y+24	; 0x18
    2c2a:	99 8d       	ldd	r25, Y+25	; 0x19
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <LCD_vInit+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c3e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9d 8b       	std	Y+21, r25	; 0x15
    2c62:	8c 8b       	std	Y+20, r24	; 0x14
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <LCD_vInit+0x4c2>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9b 8b       	std	Y+19, r25	; 0x13
    2c6c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c6e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c70:	9b 89       	ldd	r25, Y+19	; 0x13
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <LCD_vInit+0x4b0>
    2c76:	9b 8b       	std	Y+19, r25	; 0x13
    2c78:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    2c7c:	9d 89       	ldd	r25, Y+21	; 0x15
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9d 8b       	std	Y+21, r25	; 0x15
    2c82:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8c 89       	ldd	r24, Y+20	; 0x14
    2c86:	9d 89       	ldd	r25, Y+21	; 0x15
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <LCD_vInit+0x4a4>
    2c8c:	24 c0       	rjmp	.+72     	; 0x2cd6 <LCD_vInit+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6e 89       	ldd	r22, Y+22	; 0x16
    2c90:	7f 89       	ldd	r23, Y+23	; 0x17
    2c92:	88 8d       	ldd	r24, Y+24	; 0x18
    2c94:	99 8d       	ldd	r25, Y+25	; 0x19
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9d 8b       	std	Y+21, r25	; 0x15
    2ca0:	8c 8b       	std	Y+20, r24	; 0x14
    2ca2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ca4:	9d 89       	ldd	r25, Y+21	; 0x15
    2ca6:	99 8b       	std	Y+17, r25	; 0x11
    2ca8:	88 8b       	std	Y+16, r24	; 0x10
    2caa:	88 89       	ldd	r24, Y+16	; 0x10
    2cac:	99 89       	ldd	r25, Y+17	; 0x11
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_vInit+0x4ec>
    2cb2:	99 8b       	std	Y+17, r25	; 0x11
    2cb4:	88 8b       	std	Y+16, r24	; 0x10
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <LCD_vInit+0x514>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cb8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cba:	78 a1       	ldd	r23, Y+32	; 0x20
    2cbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	8e 8f       	std	Y+30, r24	; 0x1e
    2cca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ccc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd0:	8a 95       	dec	r24
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_vInit+0x50e>
    2cd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(39);
	LCD_vInstruction(CMD_CLR);/*Command to clear display*/
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    2cdc:	8a e0       	ldi	r24, 0x0A	; 10
    2cde:	97 ed       	ldi	r25, 0xD7	; 215
    2ce0:	a3 ec       	ldi	r26, 0xC3	; 195
    2ce2:	bf e3       	ldi	r27, 0x3F	; 63
    2ce4:	8b 87       	std	Y+11, r24	; 0x0b
    2ce6:	9c 87       	std	Y+12, r25	; 0x0c
    2ce8:	ad 87       	std	Y+13, r26	; 0x0d
    2cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8f 83       	std	Y+7, r24	; 0x07
    2d06:	98 87       	std	Y+8, r25	; 0x08
    2d08:	a9 87       	std	Y+9, r26	; 0x09
    2d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_vInit+0x56c>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_vInit+0x5ea>
	else if (__tmp > 65535)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_vInit+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_vInit+0x5cc>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_vInit+0x5ba>
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	9e 81       	ldd	r25, Y+6	; 0x06
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_vInit+0x5ae>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <LCD_vInit+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_vInit+0x5f6>
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.53);
	LCD_vInstruction(CMD_ENTRY_MODE_INC);/*Command to increament cursor*/
    2dc0:	86 e0       	ldi	r24, 0x06	; 6
    2dc2:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
#endif

}
    2dc6:	c4 5b       	subi	r28, 0xB4	; 180
    2dc8:	df 4f       	sbci	r29, 0xFF	; 255
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	08 95       	ret

00002dde <LCD_vSendData>:

void LCD_vSendData(u8 A_u8Data)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	69 97       	sbiw	r28, 0x19	; 25
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	89 8f       	std	Y+25, r24	; 0x19
	DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_HIGH);/*set the En high to make LCD read*/
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	62 e0       	ldi	r22, 0x02	; 2
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
		DIO_vSetPinVal(RS_PORT, RS_PIN, VAL_HIGH);/*Choosing the data register*/
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
		DIO_vSetPinVal(RW_PORT, RW_PIN, VAL_LOW);/*Writing to the LCD*/
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			_delay_us(5);
		#else
			/*In 4Bit mode we send the higher nibble first then the lower nibble*/

			/*Sending the higher nibble*/
			DIO_vSetPinVal(DATA_PORT, LCD_D4_ID, GET_BIT(A_u8Data, PIN4_ID));
    2e12:	89 8d       	ldd	r24, Y+25	; 0x19
    2e14:	82 95       	swap	r24
    2e16:	8f 70       	andi	r24, 0x0F	; 15
    2e18:	98 2f       	mov	r25, r24
    2e1a:	91 70       	andi	r25, 0x01	; 1
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	49 2f       	mov	r20, r25
    2e22:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D5_ID, GET_BIT(A_u8Data, PIN5_ID));
    2e26:	89 8d       	ldd	r24, Y+25	; 0x19
    2e28:	82 95       	swap	r24
    2e2a:	86 95       	lsr	r24
    2e2c:	87 70       	andi	r24, 0x07	; 7
    2e2e:	98 2f       	mov	r25, r24
    2e30:	91 70       	andi	r25, 0x01	; 1
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	65 e0       	ldi	r22, 0x05	; 5
    2e36:	49 2f       	mov	r20, r25
    2e38:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D6_ID, GET_BIT(A_u8Data, PIN6_ID));
    2e3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e3e:	82 95       	swap	r24
    2e40:	86 95       	lsr	r24
    2e42:	86 95       	lsr	r24
    2e44:	83 70       	andi	r24, 0x03	; 3
    2e46:	98 2f       	mov	r25, r24
    2e48:	91 70       	andi	r25, 0x01	; 1
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	66 e0       	ldi	r22, 0x06	; 6
    2e4e:	49 2f       	mov	r20, r25
    2e50:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D7_ID, GET_BIT(A_u8Data, PIN7_ID));
    2e54:	89 8d       	ldd	r24, Y+25	; 0x19
    2e56:	98 2f       	mov	r25, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	99 27       	eor	r25, r25
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	67 e0       	ldi	r22, 0x07	; 7
    2e62:	49 2f       	mov	r20, r25
    2e64:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_LOW);/*Falling edge to perform the instruction*/
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	62 e0       	ldi	r22, 0x02	; 2
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>


			/*Sending the lower nibble*/
			DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_HIGH);/*set the En high to make LCD read*/
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D4_ID, GET_BIT(A_u8Data, PIN0_ID));
    2e7c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e7e:	98 2f       	mov	r25, r24
    2e80:	91 70       	andi	r25, 0x01	; 1
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	64 e0       	ldi	r22, 0x04	; 4
    2e86:	49 2f       	mov	r20, r25
    2e88:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D5_ID, GET_BIT(A_u8Data, PIN1_ID));
    2e8c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e8e:	86 95       	lsr	r24
    2e90:	98 2f       	mov	r25, r24
    2e92:	91 70       	andi	r25, 0x01	; 1
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	65 e0       	ldi	r22, 0x05	; 5
    2e98:	49 2f       	mov	r20, r25
    2e9a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D6_ID, GET_BIT(A_u8Data, PIN2_ID));
    2e9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea0:	86 95       	lsr	r24
    2ea2:	86 95       	lsr	r24
    2ea4:	98 2f       	mov	r25, r24
    2ea6:	91 70       	andi	r25, 0x01	; 1
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	66 e0       	ldi	r22, 0x06	; 6
    2eac:	49 2f       	mov	r20, r25
    2eae:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(DATA_PORT, LCD_D7_ID, GET_BIT(A_u8Data, PIN3_ID));
    2eb2:	89 8d       	ldd	r24, Y+25	; 0x19
    2eb4:	86 95       	lsr	r24
    2eb6:	86 95       	lsr	r24
    2eb8:	86 95       	lsr	r24
    2eba:	98 2f       	mov	r25, r24
    2ebc:	91 70       	andi	r25, 0x01	; 1
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	67 e0       	ldi	r22, 0x07	; 7
    2ec2:	49 2f       	mov	r20, r25
    2ec4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_LOW);/*Falling edge to perform the instruction*/
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	62 e0       	ldi	r22, 0x02	; 2
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	a0 e2       	ldi	r26, 0x20	; 32
    2ed8:	b1 e4       	ldi	r27, 0x41	; 65
    2eda:	8d 8b       	std	Y+21, r24	; 0x15
    2edc:	9e 8b       	std	Y+22, r25	; 0x16
    2ede:	af 8b       	std	Y+23, r26	; 0x17
    2ee0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eea:	2b ea       	ldi	r18, 0xAB	; 171
    2eec:	3a ea       	ldi	r19, 0xAA	; 170
    2eee:	4a e2       	ldi	r20, 0x2A	; 42
    2ef0:	50 e4       	ldi	r21, 0x40	; 64
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	89 8b       	std	Y+17, r24	; 0x11
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	ab 8b       	std	Y+19, r26	; 0x13
    2f00:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f02:	69 89       	ldd	r22, Y+17	; 0x11
    2f04:	7a 89       	ldd	r23, Y+18	; 0x12
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	1c f4       	brge	.+6      	; 0x2f20 <LCD_vSendData+0x142>
		__ticks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	88 8b       	std	Y+16, r24	; 0x10
    2f1e:	91 c0       	rjmp	.+290    	; 0x3042 <LCD_vSendData+0x264>
	else if (__tmp > 255)
    2f20:	69 89       	ldd	r22, Y+17	; 0x11
    2f22:	7a 89       	ldd	r23, Y+18	; 0x12
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4f e7       	ldi	r20, 0x7F	; 127
    2f2e:	53 e4       	ldi	r21, 0x43	; 67
    2f30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f34:	18 16       	cp	r1, r24
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <LCD_vSendData+0x15c>
    2f38:	7b c0       	rjmp	.+246    	; 0x3030 <LCD_vSendData+0x252>
	{
		_delay_ms(__us / 1000.0);
    2f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	98 8d       	ldd	r25, Y+24	; 0x18
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a e7       	ldi	r20, 0x7A	; 122
    2f48:	54 e4       	ldi	r21, 0x44	; 68
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8c 87       	std	Y+12, r24	; 0x0c
    2f54:	9d 87       	std	Y+13, r25	; 0x0d
    2f56:	ae 87       	std	Y+14, r26	; 0x0e
    2f58:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f60:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a ef       	ldi	r20, 0xFA	; 250
    2f68:	54 e4       	ldi	r21, 0x44	; 68
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	88 87       	std	Y+8, r24	; 0x08
    2f74:	99 87       	std	Y+9, r25	; 0x09
    2f76:	aa 87       	std	Y+10, r26	; 0x0a
    2f78:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f7a:	68 85       	ldd	r22, Y+8	; 0x08
    2f7c:	79 85       	ldd	r23, Y+9	; 0x09
    2f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <LCD_vSendData+0x1be>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9f 83       	std	Y+7, r25	; 0x07
    2f98:	8e 83       	std	Y+6, r24	; 0x06
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <LCD_vSendData+0x23c>
	else if (__tmp > 65535)
    2f9c:	68 85       	ldd	r22, Y+8	; 0x08
    2f9e:	79 85       	ldd	r23, Y+9	; 0x09
    2fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <LCD_vSendData+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fb6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9f 83       	std	Y+7, r25	; 0x07
    2fda:	8e 83       	std	Y+6, r24	; 0x06
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <LCD_vSendData+0x21e>
    2fde:	88 ec       	ldi	r24, 0xC8	; 200
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9d 83       	std	Y+5, r25	; 0x05
    2fe4:	8c 83       	std	Y+4, r24	; 0x04
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_vSendData+0x20c>
    2fee:	9d 83       	std	Y+5, r25	; 0x05
    2ff0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	9f 83       	std	Y+7, r25	; 0x07
    2ffa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <LCD_vSendData+0x200>
    3004:	24 c0       	rjmp	.+72     	; 0x304e <LCD_vSendData+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	68 85       	ldd	r22, Y+8	; 0x08
    3008:	79 85       	ldd	r23, Y+9	; 0x09
    300a:	8a 85       	ldd	r24, Y+10	; 0x0a
    300c:	9b 85       	ldd	r25, Y+11	; 0x0b
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9f 83       	std	Y+7, r25	; 0x07
    3018:	8e 83       	std	Y+6, r24	; 0x06
    301a:	8e 81       	ldd	r24, Y+6	; 0x06
    301c:	9f 81       	ldd	r25, Y+7	; 0x07
    301e:	9b 83       	std	Y+3, r25	; 0x03
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	9b 81       	ldd	r25, Y+3	; 0x03
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_vSendData+0x248>
    302a:	9b 83       	std	Y+3, r25	; 0x03
    302c:	8a 83       	std	Y+2, r24	; 0x02
    302e:	0f c0       	rjmp	.+30     	; 0x304e <LCD_vSendData+0x270>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3030:	69 89       	ldd	r22, Y+17	; 0x11
    3032:	7a 89       	ldd	r23, Y+18	; 0x12
    3034:	8b 89       	ldd	r24, Y+19	; 0x13
    3036:	9c 89       	ldd	r25, Y+20	; 0x14
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	88 8b       	std	Y+16, r24	; 0x10
    3042:	88 89       	ldd	r24, Y+16	; 0x10
    3044:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	8a 95       	dec	r24
    304a:	f1 f7       	brne	.-4      	; 0x3048 <LCD_vSendData+0x26a>
    304c:	89 83       	std	Y+1, r24	; 0x01

			_delay_us(10);
		#endif
}
    304e:	69 96       	adiw	r28, 0x19	; 25
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <LCD_vDispChar>:
void LCD_vDispChar(u8 A_u8Ch)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	0f 92       	push	r0
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendData(A_u8Ch);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_vSendData>



}
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <LCD_vDispStr>:
void LCD_vDispStr(u8* A_u8Str)
{ u8 i=0;
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	00 d0       	rcall	.+0      	; 0x3080 <LCD_vDispStr+0x6>
    3080:	0f 92       	push	r0
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	9b 83       	std	Y+3, r25	; 0x03
    3088:	8a 83       	std	Y+2, r24	; 0x02
    308a:	19 82       	std	Y+1, r1	; 0x01
    308c:	0e c0       	rjmp	.+28     	; 0x30aa <LCD_vDispStr+0x30>

		for(;A_u8Str[i]!='\0';i++)
		LCD_vDispChar(A_u8Str[i]);
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	fc 01       	movw	r30, r24
    309a:	e2 0f       	add	r30, r18
    309c:	f3 1f       	adc	r31, r19
    309e:	80 81       	ld	r24, Z
    30a0:	0e 94 30 18 	call	0x3060	; 0x3060 <LCD_vDispChar>

}
void LCD_vDispStr(u8* A_u8Str)
{ u8 i=0;

		for(;A_u8Str[i]!='\0';i++)
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	fc 01       	movw	r30, r24
    30b6:	e2 0f       	add	r30, r18
    30b8:	f3 1f       	adc	r31, r19
    30ba:	80 81       	ld	r24, Z
    30bc:	88 23       	and	r24, r24
    30be:	39 f7       	brne	.-50     	; 0x308e <LCD_vDispStr+0x14>
		LCD_vDispChar(A_u8Str[i]);

}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <LCD_vDispNum>:

void LCD_vDispNum(u32 A_u8Num)
{u8 arr[10],i=0;
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	2f 97       	sbiw	r28, 0x0f	; 15
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	6c 87       	std	Y+12, r22	; 0x0c
    30e6:	7d 87       	std	Y+13, r23	; 0x0d
    30e8:	8e 87       	std	Y+14, r24	; 0x0e
    30ea:	9f 87       	std	Y+15, r25	; 0x0f
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	31 c0       	rjmp	.+98     	; 0x3152 <LCD_vDispNum+0x86>

	for(;A_u8Num>0;i++)
	{
		arr[i]=LCD_vConvIntToChar(A_u8Num%10);
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	08 2f       	mov	r16, r24
    30f4:	10 e0       	ldi	r17, 0x00	; 0
    30f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    30f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    30fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    30fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    30fe:	2a e0       	ldi	r18, 0x0A	; 10
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	50 e0       	ldi	r21, 0x00	; 0
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodsi4>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_vConvIntToChar>
    311a:	28 2f       	mov	r18, r24
    311c:	ce 01       	movw	r24, r28
    311e:	02 96       	adiw	r24, 0x02	; 2
    3120:	fc 01       	movw	r30, r24
    3122:	e0 0f       	add	r30, r16
    3124:	f1 1f       	adc	r31, r17
    3126:	20 83       	st	Z, r18

		A_u8Num/=10;
    3128:	8c 85       	ldd	r24, Y+12	; 0x0c
    312a:	9d 85       	ldd	r25, Y+13	; 0x0d
    312c:	ae 85       	ldd	r26, Y+14	; 0x0e
    312e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3130:	2a e0       	ldi	r18, 0x0A	; 10
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodsi4>
    3140:	da 01       	movw	r26, r20
    3142:	c9 01       	movw	r24, r18
    3144:	8c 87       	std	Y+12, r24	; 0x0c
    3146:	9d 87       	std	Y+13, r25	; 0x0d
    3148:	ae 87       	std	Y+14, r26	; 0x0e
    314a:	bf 87       	std	Y+15, r27	; 0x0f
}

void LCD_vDispNum(u32 A_u8Num)
{u8 arr[10],i=0;

	for(;A_u8Num>0;i++)
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	8c 85       	ldd	r24, Y+12	; 0x0c
    3154:	9d 85       	ldd	r25, Y+13	; 0x0d
    3156:	ae 85       	ldd	r26, Y+14	; 0x0e
    3158:	bf 85       	ldd	r27, Y+15	; 0x0f
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	a1 05       	cpc	r26, r1
    315e:	b1 05       	cpc	r27, r1
    3160:	39 f6       	brne	.-114    	; 0x30f0 <LCD_vDispNum+0x24>
    3162:	11 c0       	rjmp	.+34     	; 0x3186 <LCD_vDispNum+0xba>

		A_u8Num/=10;
	}

	for(;i>0;i--)
		UART_vSendData(arr[i-1]);
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	9c 01       	movw	r18, r24
    316c:	21 50       	subi	r18, 0x01	; 1
    316e:	30 40       	sbci	r19, 0x00	; 0
    3170:	ce 01       	movw	r24, r28
    3172:	02 96       	adiw	r24, 0x02	; 2
    3174:	fc 01       	movw	r30, r24
    3176:	e2 0f       	add	r30, r18
    3178:	f3 1f       	adc	r31, r19
    317a:	80 81       	ld	r24, Z
    317c:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_vSendData>
		arr[i]=LCD_vConvIntToChar(A_u8Num%10);

		A_u8Num/=10;
	}

	for(;i>0;i--)
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	81 50       	subi	r24, 0x01	; 1
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	88 23       	and	r24, r24
    318a:	61 f7       	brne	.-40     	; 0x3164 <LCD_vDispNum+0x98>
		UART_vSendData(arr[i-1]);

}
    318c:	2f 96       	adiw	r28, 0x0f	; 15
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <LCD_vCLR>:
void LCD_vCLR()
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	2e 97       	sbiw	r28, 0x0e	; 14
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
	LCD_vInstruction(CMD_CLR);
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    31bc:	8a e0       	ldi	r24, 0x0A	; 10
    31be:	97 ed       	ldi	r25, 0xD7	; 215
    31c0:	a3 ec       	ldi	r26, 0xC3	; 195
    31c2:	bf e3       	ldi	r27, 0x3F	; 63
    31c4:	8b 87       	std	Y+11, r24	; 0x0b
    31c6:	9c 87       	std	Y+12, r25	; 0x0c
    31c8:	ad 87       	std	Y+13, r26	; 0x0d
    31ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8f 83       	std	Y+7, r24	; 0x07
    31e6:	98 87       	std	Y+8, r25	; 0x08
    31e8:	a9 87       	std	Y+9, r26	; 0x09
    31ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ec:	6f 81       	ldd	r22, Y+7	; 0x07
    31ee:	78 85       	ldd	r23, Y+8	; 0x08
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <LCD_vCLR+0x6c>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	3f c0       	rjmp	.+126    	; 0x328c <LCD_vCLR+0xea>
	else if (__tmp > 65535)
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	89 85       	ldd	r24, Y+9	; 0x09
    3214:	9a 85       	ldd	r25, Y+10	; 0x0a
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <LCD_vCLR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	0f c0       	rjmp	.+30     	; 0x326e <LCD_vCLR+0xcc>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <LCD_vCLR+0xba>
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	9e 81       	ldd	r25, Y+6	; 0x06
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <LCD_vCLR+0xae>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <LCD_vCLR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6f 81       	ldd	r22, Y+7	; 0x07
    327a:	78 85       	ldd	r23, Y+8	; 0x08
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <LCD_vCLR+0xf6>
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.53);

}
    32a0:	2e 96       	adiw	r28, 0x0e	; 14
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <LCD_vSetPos>:
void LCD_vSetPos(u8 A_u8Row,u8 A_u8Col)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <LCD_vSetPos+0x6>
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <LCD_vSetPos+0x8>
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <LCD_vSetPos+0xa>
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	8b 83       	std	Y+3, r24	; 0x03
    32c2:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8FirstRow = 0x00, L_u8SecondRow = 0x40;
    32c4:	1a 82       	std	Y+2, r1	; 0x02
    32c6:	80 e4       	ldi	r24, 0x40	; 64
    32c8:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Row){
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	3e 83       	std	Y+6, r19	; 0x06
    32d2:	2d 83       	std	Y+5, r18	; 0x05
    32d4:	8d 81       	ldd	r24, Y+5	; 0x05
    32d6:	9e 81       	ldd	r25, Y+6	; 0x06
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	31 f0       	breq	.+12     	; 0x32e8 <LCD_vSetPos+0x36>
    32dc:	2d 81       	ldd	r18, Y+5	; 0x05
    32de:	3e 81       	ldd	r19, Y+6	; 0x06
    32e0:	21 30       	cpi	r18, 0x01	; 1
    32e2:	31 05       	cpc	r19, r1
    32e4:	41 f0       	breq	.+16     	; 0x32f6 <LCD_vSetPos+0x44>
    32e6:	0d c0       	rjmp	.+26     	; 0x3302 <LCD_vSetPos+0x50>
		case ROW_ID0: LCD_vInstruction(CMD_SET_CURSOR_POSITION + L_u8FirstRow + A_u8Col); break;
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	8c 81       	ldd	r24, Y+4	; 0x04
    32ec:	89 0f       	add	r24, r25
    32ee:	80 58       	subi	r24, 0x80	; 128
    32f0:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    32f4:	06 c0       	rjmp	.+12     	; 0x3302 <LCD_vSetPos+0x50>
		case ROW_ID1: LCD_vInstruction(CMD_SET_CURSOR_POSITION + L_u8SecondRow + A_u8Col); break;
    32f6:	99 81       	ldd	r25, Y+1	; 0x01
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	89 0f       	add	r24, r25
    32fc:	80 58       	subi	r24, 0x80	; 128
    32fe:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>

	}

}
    3302:	26 96       	adiw	r28, 0x06	; 6
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	08 95       	ret

00003314 <LCD_vInstruction>:

void LCD_vInstruction(u8 A_u8Cmd)
{
    3314:	df 93       	push	r29
    3316:	cf 93       	push	r28
    3318:	0f 92       	push	r0
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPinVal(RS_PORT, RS_PIN, VAL_LOW);/*Choosing the instruction register*/
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(RW_PORT, RW_PIN, VAL_LOW);/*Writing to the LCD*/
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
			DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_HIGH);/*set the En high to make LCD read*/
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	62 e0       	ldi	r22, 0x02	; 2
    3338:	41 e0       	ldi	r20, 0x01	; 1
    333a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_LOW);/*Falling edge to perform the instruction*/
				#else /*Four bit mode*/
					/*In 4Bit mode we send the higher nibble first then the lower nibble*/

					/*Sending the higher nibble*/
					DIO_vSetPinVal(DATA_PORT, LCD_D4_ID, GET_BIT(A_u8Cmd, PIN4_ID));
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	82 95       	swap	r24
    3342:	8f 70       	andi	r24, 0x0F	; 15
    3344:	98 2f       	mov	r25, r24
    3346:	91 70       	andi	r25, 0x01	; 1
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	64 e0       	ldi	r22, 0x04	; 4
    334c:	49 2f       	mov	r20, r25
    334e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D5_ID, GET_BIT(A_u8Cmd, PIN5_ID));
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	82 95       	swap	r24
    3356:	86 95       	lsr	r24
    3358:	87 70       	andi	r24, 0x07	; 7
    335a:	98 2f       	mov	r25, r24
    335c:	91 70       	andi	r25, 0x01	; 1
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	65 e0       	ldi	r22, 0x05	; 5
    3362:	49 2f       	mov	r20, r25
    3364:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D6_ID, GET_BIT(A_u8Cmd, PIN6_ID));
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	82 95       	swap	r24
    336c:	86 95       	lsr	r24
    336e:	86 95       	lsr	r24
    3370:	83 70       	andi	r24, 0x03	; 3
    3372:	98 2f       	mov	r25, r24
    3374:	91 70       	andi	r25, 0x01	; 1
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	66 e0       	ldi	r22, 0x06	; 6
    337a:	49 2f       	mov	r20, r25
    337c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D7_ID, GET_BIT(A_u8Cmd, PIN7_ID));
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	98 2f       	mov	r25, r24
    3384:	99 1f       	adc	r25, r25
    3386:	99 27       	eor	r25, r25
    3388:	99 1f       	adc	r25, r25
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	67 e0       	ldi	r22, 0x07	; 7
    338e:	49 2f       	mov	r20, r25
    3390:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_LOW);/*Falling edge to perform the instruction*/
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	62 e0       	ldi	r22, 0x02	; 2
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>


					/*Sending the lower nibble*/
					DIO_vSetPinVal(EN_PORT,EN_PIN, VAL_HIGH);/*set the En high to make LCD read*/
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	62 e0       	ldi	r22, 0x02	; 2
    33a2:	41 e0       	ldi	r20, 0x01	; 1
    33a4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D4_ID, GET_BIT(A_u8Cmd, PIN0_ID));
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	98 2f       	mov	r25, r24
    33ac:	91 70       	andi	r25, 0x01	; 1
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	64 e0       	ldi	r22, 0x04	; 4
    33b2:	49 2f       	mov	r20, r25
    33b4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D5_ID, GET_BIT(A_u8Cmd, PIN1_ID));
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	86 95       	lsr	r24
    33bc:	98 2f       	mov	r25, r24
    33be:	91 70       	andi	r25, 0x01	; 1
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	65 e0       	ldi	r22, 0x05	; 5
    33c4:	49 2f       	mov	r20, r25
    33c6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D6_ID, GET_BIT(A_u8Cmd, PIN2_ID));
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	86 95       	lsr	r24
    33ce:	86 95       	lsr	r24
    33d0:	98 2f       	mov	r25, r24
    33d2:	91 70       	andi	r25, 0x01	; 1
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	66 e0       	ldi	r22, 0x06	; 6
    33d8:	49 2f       	mov	r20, r25
    33da:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(DATA_PORT, LCD_D7_ID, GET_BIT(A_u8Cmd, PIN3_ID));
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	86 95       	lsr	r24
    33e2:	86 95       	lsr	r24
    33e4:	86 95       	lsr	r24
    33e6:	98 2f       	mov	r25, r24
    33e8:	91 70       	andi	r25, 0x01	; 1
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	67 e0       	ldi	r22, 0x07	; 7
    33ee:	49 2f       	mov	r20, r25
    33f0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>
					DIO_vSetPinVal(EN_PORT, EN_PIN, VAL_LOW);/*Falling edge to perform the instruction*/
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	62 e0       	ldi	r22, 0x02	; 2
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_vSetPinVal>

				#endif

}
    33fe:	0f 90       	pop	r0
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <LCD_vConvIntToChar>:

u8 LCD_vConvIntToChar(u32 A_u32Num)
{u8 temp;
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	29 97       	sbiw	r28, 0x09	; 9
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	6a 83       	std	Y+2, r22	; 0x02
    341c:	7b 83       	std	Y+3, r23	; 0x03
    341e:	8c 83       	std	Y+4, r24	; 0x04
    3420:	9d 83       	std	Y+5, r25	; 0x05
	switch(A_u32Num)
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	ac 81       	ldd	r26, Y+4	; 0x04
    3428:	bd 81       	ldd	r27, Y+5	; 0x05
    342a:	8e 83       	std	Y+6, r24	; 0x06
    342c:	9f 83       	std	Y+7, r25	; 0x07
    342e:	a8 87       	std	Y+8, r26	; 0x08
    3430:	b9 87       	std	Y+9, r27	; 0x09
    3432:	8e 81       	ldd	r24, Y+6	; 0x06
    3434:	9f 81       	ldd	r25, Y+7	; 0x07
    3436:	a8 85       	ldd	r26, Y+8	; 0x08
    3438:	b9 85       	ldd	r27, Y+9	; 0x09
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	91 05       	cpc	r25, r1
    343e:	a1 05       	cpc	r26, r1
    3440:	b1 05       	cpc	r27, r1
    3442:	09 f4       	brne	.+2      	; 0x3446 <LCD_vConvIntToChar+0x40>
    3444:	77 c0       	rjmp	.+238    	; 0x3534 <LCD_vConvIntToChar+0x12e>
    3446:	8e 81       	ldd	r24, Y+6	; 0x06
    3448:	9f 81       	ldd	r25, Y+7	; 0x07
    344a:	a8 85       	ldd	r26, Y+8	; 0x08
    344c:	b9 85       	ldd	r27, Y+9	; 0x09
    344e:	85 30       	cpi	r24, 0x05	; 5
    3450:	91 05       	cpc	r25, r1
    3452:	a1 05       	cpc	r26, r1
    3454:	b1 05       	cpc	r27, r1
    3456:	48 f5       	brcc	.+82     	; 0x34aa <LCD_vConvIntToChar+0xa4>
    3458:	8e 81       	ldd	r24, Y+6	; 0x06
    345a:	9f 81       	ldd	r25, Y+7	; 0x07
    345c:	a8 85       	ldd	r26, Y+8	; 0x08
    345e:	b9 85       	ldd	r27, Y+9	; 0x09
    3460:	81 30       	cpi	r24, 0x01	; 1
    3462:	91 05       	cpc	r25, r1
    3464:	a1 05       	cpc	r26, r1
    3466:	b1 05       	cpc	r27, r1
    3468:	09 f4       	brne	.+2      	; 0x346c <LCD_vConvIntToChar+0x66>
    346a:	5b c0       	rjmp	.+182    	; 0x3522 <LCD_vConvIntToChar+0x11c>
    346c:	8e 81       	ldd	r24, Y+6	; 0x06
    346e:	9f 81       	ldd	r25, Y+7	; 0x07
    3470:	a8 85       	ldd	r26, Y+8	; 0x08
    3472:	b9 85       	ldd	r27, Y+9	; 0x09
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	91 05       	cpc	r25, r1
    3478:	a1 05       	cpc	r26, r1
    347a:	b1 05       	cpc	r27, r1
    347c:	08 f4       	brcc	.+2      	; 0x3480 <LCD_vConvIntToChar+0x7a>
    347e:	4e c0       	rjmp	.+156    	; 0x351c <LCD_vConvIntToChar+0x116>
    3480:	8e 81       	ldd	r24, Y+6	; 0x06
    3482:	9f 81       	ldd	r25, Y+7	; 0x07
    3484:	a8 85       	ldd	r26, Y+8	; 0x08
    3486:	b9 85       	ldd	r27, Y+9	; 0x09
    3488:	82 30       	cpi	r24, 0x02	; 2
    348a:	91 05       	cpc	r25, r1
    348c:	a1 05       	cpc	r26, r1
    348e:	b1 05       	cpc	r27, r1
    3490:	09 f4       	brne	.+2      	; 0x3494 <LCD_vConvIntToChar+0x8e>
    3492:	4a c0       	rjmp	.+148    	; 0x3528 <LCD_vConvIntToChar+0x122>
    3494:	8e 81       	ldd	r24, Y+6	; 0x06
    3496:	9f 81       	ldd	r25, Y+7	; 0x07
    3498:	a8 85       	ldd	r26, Y+8	; 0x08
    349a:	b9 85       	ldd	r27, Y+9	; 0x09
    349c:	83 30       	cpi	r24, 0x03	; 3
    349e:	91 05       	cpc	r25, r1
    34a0:	a1 05       	cpc	r26, r1
    34a2:	b1 05       	cpc	r27, r1
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <LCD_vConvIntToChar+0xa2>
    34a6:	43 c0       	rjmp	.+134    	; 0x352e <LCD_vConvIntToChar+0x128>
    34a8:	56 c0       	rjmp	.+172    	; 0x3556 <LCD_vConvIntToChar+0x150>
    34aa:	8e 81       	ldd	r24, Y+6	; 0x06
    34ac:	9f 81       	ldd	r25, Y+7	; 0x07
    34ae:	a8 85       	ldd	r26, Y+8	; 0x08
    34b0:	b9 85       	ldd	r27, Y+9	; 0x09
    34b2:	87 30       	cpi	r24, 0x07	; 7
    34b4:	91 05       	cpc	r25, r1
    34b6:	a1 05       	cpc	r26, r1
    34b8:	b1 05       	cpc	r27, r1
    34ba:	09 f4       	brne	.+2      	; 0x34be <LCD_vConvIntToChar+0xb8>
    34bc:	44 c0       	rjmp	.+136    	; 0x3546 <LCD_vConvIntToChar+0x140>
    34be:	8e 81       	ldd	r24, Y+6	; 0x06
    34c0:	9f 81       	ldd	r25, Y+7	; 0x07
    34c2:	a8 85       	ldd	r26, Y+8	; 0x08
    34c4:	b9 85       	ldd	r27, Y+9	; 0x09
    34c6:	88 30       	cpi	r24, 0x08	; 8
    34c8:	91 05       	cpc	r25, r1
    34ca:	a1 05       	cpc	r26, r1
    34cc:	b1 05       	cpc	r27, r1
    34ce:	98 f4       	brcc	.+38     	; 0x34f6 <LCD_vConvIntToChar+0xf0>
    34d0:	8e 81       	ldd	r24, Y+6	; 0x06
    34d2:	9f 81       	ldd	r25, Y+7	; 0x07
    34d4:	a8 85       	ldd	r26, Y+8	; 0x08
    34d6:	b9 85       	ldd	r27, Y+9	; 0x09
    34d8:	85 30       	cpi	r24, 0x05	; 5
    34da:	91 05       	cpc	r25, r1
    34dc:	a1 05       	cpc	r26, r1
    34de:	b1 05       	cpc	r27, r1
    34e0:	61 f1       	breq	.+88     	; 0x353a <LCD_vConvIntToChar+0x134>
    34e2:	8e 81       	ldd	r24, Y+6	; 0x06
    34e4:	9f 81       	ldd	r25, Y+7	; 0x07
    34e6:	a8 85       	ldd	r26, Y+8	; 0x08
    34e8:	b9 85       	ldd	r27, Y+9	; 0x09
    34ea:	86 30       	cpi	r24, 0x06	; 6
    34ec:	91 05       	cpc	r25, r1
    34ee:	a1 05       	cpc	r26, r1
    34f0:	b1 05       	cpc	r27, r1
    34f2:	31 f1       	breq	.+76     	; 0x3540 <LCD_vConvIntToChar+0x13a>
    34f4:	30 c0       	rjmp	.+96     	; 0x3556 <LCD_vConvIntToChar+0x150>
    34f6:	8e 81       	ldd	r24, Y+6	; 0x06
    34f8:	9f 81       	ldd	r25, Y+7	; 0x07
    34fa:	a8 85       	ldd	r26, Y+8	; 0x08
    34fc:	b9 85       	ldd	r27, Y+9	; 0x09
    34fe:	88 30       	cpi	r24, 0x08	; 8
    3500:	91 05       	cpc	r25, r1
    3502:	a1 05       	cpc	r26, r1
    3504:	b1 05       	cpc	r27, r1
    3506:	11 f1       	breq	.+68     	; 0x354c <LCD_vConvIntToChar+0x146>
    3508:	8e 81       	ldd	r24, Y+6	; 0x06
    350a:	9f 81       	ldd	r25, Y+7	; 0x07
    350c:	a8 85       	ldd	r26, Y+8	; 0x08
    350e:	b9 85       	ldd	r27, Y+9	; 0x09
    3510:	89 30       	cpi	r24, 0x09	; 9
    3512:	91 05       	cpc	r25, r1
    3514:	a1 05       	cpc	r26, r1
    3516:	b1 05       	cpc	r27, r1
    3518:	e1 f0       	breq	.+56     	; 0x3552 <LCD_vConvIntToChar+0x14c>
    351a:	1d c0       	rjmp	.+58     	; 0x3556 <LCD_vConvIntToChar+0x150>
	{
	case 0:temp='0';break;
    351c:	80 e3       	ldi	r24, 0x30	; 48
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	1a c0       	rjmp	.+52     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 1:temp='1';break;
    3522:	81 e3       	ldi	r24, 0x31	; 49
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	17 c0       	rjmp	.+46     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 2:temp='2';break;
    3528:	82 e3       	ldi	r24, 0x32	; 50
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	14 c0       	rjmp	.+40     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 3:temp='3';break;
    352e:	83 e3       	ldi	r24, 0x33	; 51
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	11 c0       	rjmp	.+34     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 4:temp='4';break;
    3534:	84 e3       	ldi	r24, 0x34	; 52
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	0e c0       	rjmp	.+28     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 5:temp='5';break;
    353a:	85 e3       	ldi	r24, 0x35	; 53
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	0b c0       	rjmp	.+22     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 6:temp='6';break;
    3540:	86 e3       	ldi	r24, 0x36	; 54
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	08 c0       	rjmp	.+16     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 7:temp='7';break;
    3546:	87 e3       	ldi	r24, 0x37	; 55
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	05 c0       	rjmp	.+10     	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 8:temp='8';break;
    354c:	88 e3       	ldi	r24, 0x38	; 56
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <LCD_vConvIntToChar+0x150>
	case 9:temp='9';break;
    3552:	89 e3       	ldi	r24, 0x39	; 57
    3554:	89 83       	std	Y+1, r24	; 0x01

	}
	return temp;
    3556:	89 81       	ldd	r24, Y+1	; 0x01
}
    3558:	29 96       	adiw	r28, 0x09	; 9
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <LCD_vDispFloat>:


void LCD_vDispFloat(f32 A_f32Num)
{
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	2e 97       	sbiw	r28, 0x0e	; 14
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	6b 87       	std	Y+11, r22	; 0x0b
    3580:	7c 87       	std	Y+12, r23	; 0x0c
    3582:	8d 87       	std	Y+13, r24	; 0x0d
    3584:	9e 87       	std	Y+14, r25	; 0x0e
	u8 L_u8Arr[10]={};
    3586:	8a e0       	ldi	r24, 0x0A	; 10
    3588:	fe 01       	movw	r30, r28
    358a:	31 96       	adiw	r30, 0x01	; 1
    358c:	df 01       	movw	r26, r30
    358e:	98 2f       	mov	r25, r24
    3590:	1d 92       	st	X+, r1
    3592:	9a 95       	dec	r25
    3594:	e9 f7       	brne	.-6      	; 0x3590 <LCD_vDispFloat+0x26>
	floatToString(A_f32Num, L_u8Arr, 3);
    3596:	8b 85       	ldd	r24, Y+11	; 0x0b
    3598:	9c 85       	ldd	r25, Y+12	; 0x0c
    359a:	ad 85       	ldd	r26, Y+13	; 0x0d
    359c:	be 85       	ldd	r27, Y+14	; 0x0e
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	9e 01       	movw	r18, r28
    35a4:	2f 5f       	subi	r18, 0xFF	; 255
    35a6:	3f 4f       	sbci	r19, 0xFF	; 255
    35a8:	a9 01       	movw	r20, r18
    35aa:	23 e0       	ldi	r18, 0x03	; 3
    35ac:	0e 94 12 1b 	call	0x3624	; 0x3624 <floatToString>
	LCD_vDispStr(L_u8Arr);
    35b0:	ce 01       	movw	r24, r28
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	0e 94 3d 18 	call	0x307a	; 0x307a <LCD_vDispStr>
}
    35b8:	2e 96       	adiw	r28, 0x0e	; 14
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <LCD_vReturnHome>:
void LCD_vReturnHome()
{
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
	LCD_vInstruction(CMD_RET_HOME);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
}
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	08 95       	ret

000035de <LCD_vShiftDisp>:
void LCD_vShiftDisp(u8 A_u8ShiftDir)
{
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <LCD_vShiftDisp+0x6>
    35e4:	0f 92       	push	r0
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ShiftDir){
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	3b 83       	std	Y+3, r19	; 0x03
    35f4:	2a 83       	std	Y+2, r18	; 0x02
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	9b 81       	ldd	r25, Y+3	; 0x03
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	31 f0       	breq	.+12     	; 0x360a <LCD_vShiftDisp+0x2c>
    35fe:	2a 81       	ldd	r18, Y+2	; 0x02
    3600:	3b 81       	ldd	r19, Y+3	; 0x03
    3602:	21 30       	cpi	r18, 0x01	; 1
    3604:	31 05       	cpc	r19, r1
    3606:	29 f0       	breq	.+10     	; 0x3612 <LCD_vShiftDisp+0x34>
    3608:	07 c0       	rjmp	.+14     	; 0x3618 <LCD_vShiftDisp+0x3a>
			case SHIFT_LEFT:  LCD_vInstruction(CMD_SHIFT_DISP_LEFT); break;
    360a:	88 e1       	ldi	r24, 0x18	; 24
    360c:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    3610:	03 c0       	rjmp	.+6      	; 0x3618 <LCD_vShiftDisp+0x3a>
			case SHIFT_RIGHT: LCD_vInstruction(CMD_SHIFT_DISP_RIGHT); break;
    3612:	8c e1       	ldi	r24, 0x1C	; 28
    3614:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
}
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <floatToString>:

void floatToString(f32 A_f32Num, u8 *A_u8Arr, u8 A_u8AfterDecimal)
{
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	64 97       	sbiw	r28, 0x14	; 20
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	6e 87       	std	Y+14, r22	; 0x0e
    363e:	7f 87       	std	Y+15, r23	; 0x0f
    3640:	88 8b       	std	Y+16, r24	; 0x10
    3642:	99 8b       	std	Y+17, r25	; 0x11
    3644:	5b 8b       	std	Y+19, r21	; 0x13
    3646:	4a 8b       	std	Y+18, r20	; 0x12
    3648:	2c 8b       	std	Y+20, r18	; 0x14
		u32 L_u32IntPart = (u32) A_f32Num;
    364a:	6e 85       	ldd	r22, Y+14	; 0x0e
    364c:	7f 85       	ldd	r23, Y+15	; 0x0f
    364e:	88 89       	ldd	r24, Y+16	; 0x10
    3650:	99 89       	ldd	r25, Y+17	; 0x11
    3652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	8a 87       	std	Y+10, r24	; 0x0a
    365c:	9b 87       	std	Y+11, r25	; 0x0b
    365e:	ac 87       	std	Y+12, r26	; 0x0c
    3660:	bd 87       	std	Y+13, r27	; 0x0d
			f32 L_f32FloatPart = A_f32Num - (f32)L_u32IntPart;
    3662:	6a 85       	ldd	r22, Y+10	; 0x0a
    3664:	7b 85       	ldd	r23, Y+11	; 0x0b
    3666:	8c 85       	ldd	r24, Y+12	; 0x0c
    3668:	9d 85       	ldd	r25, Y+13	; 0x0d
    366a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    366e:	9b 01       	movw	r18, r22
    3670:	ac 01       	movw	r20, r24
    3672:	6e 85       	ldd	r22, Y+14	; 0x0e
    3674:	7f 85       	ldd	r23, Y+15	; 0x0f
    3676:	88 89       	ldd	r24, Y+16	; 0x10
    3678:	99 89       	ldd	r25, Y+17	; 0x11
    367a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	8e 83       	std	Y+6, r24	; 0x06
    3684:	9f 83       	std	Y+7, r25	; 0x07
    3686:	a8 87       	std	Y+8, r26	; 0x08
    3688:	b9 87       	std	Y+9, r27	; 0x09

			u8 i=0;
    368a:	1d 82       	std	Y+5, r1	; 0x05
    368c:	31 c0       	rjmp	.+98     	; 0x36f0 <floatToString+0xcc>

				for(;L_u32IntPart>0;i++)
				{
					A_u8Arr[i]=LCD_vConvIntToChar(L_u32IntPart%10);
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	8a 89       	ldd	r24, Y+18	; 0x12
    3696:	9b 89       	ldd	r25, Y+19	; 0x13
    3698:	8c 01       	movw	r16, r24
    369a:	02 0f       	add	r16, r18
    369c:	13 1f       	adc	r17, r19
    369e:	8a 85       	ldd	r24, Y+10	; 0x0a
    36a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    36a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    36a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    36a6:	2a e0       	ldi	r18, 0x0A	; 10
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	50 e0       	ldi	r21, 0x00	; 0
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodsi4>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_vConvIntToChar>
    36c2:	f8 01       	movw	r30, r16
    36c4:	80 83       	st	Z, r24

					L_u32IntPart/=10;
    36c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ca:	ac 85       	ldd	r26, Y+12	; 0x0c
    36cc:	bd 85       	ldd	r27, Y+13	; 0x0d
    36ce:	2a e0       	ldi	r18, 0x0A	; 10
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodsi4>
    36de:	da 01       	movw	r26, r20
    36e0:	c9 01       	movw	r24, r18
    36e2:	8a 87       	std	Y+10, r24	; 0x0a
    36e4:	9b 87       	std	Y+11, r25	; 0x0b
    36e6:	ac 87       	std	Y+12, r26	; 0x0c
    36e8:	bd 87       	std	Y+13, r27	; 0x0d
		u32 L_u32IntPart = (u32) A_f32Num;
			f32 L_f32FloatPart = A_f32Num - (f32)L_u32IntPart;

			u8 i=0;

				for(;L_u32IntPart>0;i++)
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	8f 5f       	subi	r24, 0xFF	; 255
    36ee:	8d 83       	std	Y+5, r24	; 0x05
    36f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    36f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    36f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    36f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	a1 05       	cpc	r26, r1
    36fc:	b1 05       	cpc	r27, r1
    36fe:	39 f6       	brne	.-114    	; 0x368e <floatToString+0x6a>
				{
					A_u8Arr[i]=LCD_vConvIntToChar(L_u32IntPart%10);

					L_u32IntPart/=10;
				}
				A_u8Arr[i]= '.';
    3700:	8d 81       	ldd	r24, Y+5	; 0x05
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	8a 89       	ldd	r24, Y+18	; 0x12
    3708:	9b 89       	ldd	r25, Y+19	; 0x13
    370a:	fc 01       	movw	r30, r24
    370c:	e2 0f       	add	r30, r18
    370e:	f3 1f       	adc	r31, r19
    3710:	8e e2       	ldi	r24, 0x2E	; 46
    3712:	80 83       	st	Z, r24
				i++;
    3714:	8d 81       	ldd	r24, Y+5	; 0x05
    3716:	8f 5f       	subi	r24, 0xFF	; 255
    3718:	8d 83       	std	Y+5, r24	; 0x05
				L_f32FloatPart*=10;
    371a:	6e 81       	ldd	r22, Y+6	; 0x06
    371c:	7f 81       	ldd	r23, Y+7	; 0x07
    371e:	88 85       	ldd	r24, Y+8	; 0x08
    3720:	99 85       	ldd	r25, Y+9	; 0x09
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	8e 83       	std	Y+6, r24	; 0x06
    3734:	9f 83       	std	Y+7, r25	; 0x07
    3736:	a8 87       	std	Y+8, r26	; 0x08
    3738:	b9 87       	std	Y+9, r27	; 0x09
				u32 L_u32Temp=L_f32FloatPart;
    373a:	6e 81       	ldd	r22, Y+6	; 0x06
    373c:	7f 81       	ldd	r23, Y+7	; 0x07
    373e:	88 85       	ldd	r24, Y+8	; 0x08
    3740:	99 85       	ldd	r25, Y+9	; 0x09
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	9a 83       	std	Y+2, r25	; 0x02
    374e:	ab 83       	std	Y+3, r26	; 0x03
    3750:	bc 83       	std	Y+4, r27	; 0x04
    3752:	4f c0       	rjmp	.+158    	; 0x37f2 <floatToString+0x1ce>
				for(;L_u32Temp!=0;i++)
				{
					A_u8Arr[i]=LCD_vConvIntToChar(L_u32Temp%10);
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	8a 89       	ldd	r24, Y+18	; 0x12
    375c:	9b 89       	ldd	r25, Y+19	; 0x13
    375e:	8c 01       	movw	r16, r24
    3760:	02 0f       	add	r16, r18
    3762:	13 1f       	adc	r17, r19
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	9a 81       	ldd	r25, Y+2	; 0x02
    3768:	ab 81       	ldd	r26, Y+3	; 0x03
    376a:	bc 81       	ldd	r27, Y+4	; 0x04
    376c:	2a e0       	ldi	r18, 0x0A	; 10
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodsi4>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_vConvIntToChar>
    3788:	f8 01       	movw	r30, r16
    378a:	80 83       	st	Z, r24
					L_f32FloatPart-=L_u32Temp;
    378c:	69 81       	ldd	r22, Y+1	; 0x01
    378e:	7a 81       	ldd	r23, Y+2	; 0x02
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	9c 81       	ldd	r25, Y+4	; 0x04
    3794:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3798:	9b 01       	movw	r18, r22
    379a:	ac 01       	movw	r20, r24
    379c:	6e 81       	ldd	r22, Y+6	; 0x06
    379e:	7f 81       	ldd	r23, Y+7	; 0x07
    37a0:	88 85       	ldd	r24, Y+8	; 0x08
    37a2:	99 85       	ldd	r25, Y+9	; 0x09
    37a4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8e 83       	std	Y+6, r24	; 0x06
    37ae:	9f 83       	std	Y+7, r25	; 0x07
    37b0:	a8 87       	std	Y+8, r26	; 0x08
    37b2:	b9 87       	std	Y+9, r27	; 0x09
					L_f32FloatPart*=10;
    37b4:	6e 81       	ldd	r22, Y+6	; 0x06
    37b6:	7f 81       	ldd	r23, Y+7	; 0x07
    37b8:	88 85       	ldd	r24, Y+8	; 0x08
    37ba:	99 85       	ldd	r25, Y+9	; 0x09
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	51 e4       	ldi	r21, 0x41	; 65
    37c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	8e 83       	std	Y+6, r24	; 0x06
    37ce:	9f 83       	std	Y+7, r25	; 0x07
    37d0:	a8 87       	std	Y+8, r26	; 0x08
    37d2:	b9 87       	std	Y+9, r27	; 0x09
					L_u32Temp=L_f32FloatPart;
    37d4:	6e 81       	ldd	r22, Y+6	; 0x06
    37d6:	7f 81       	ldd	r23, Y+7	; 0x07
    37d8:	88 85       	ldd	r24, Y+8	; 0x08
    37da:	99 85       	ldd	r25, Y+9	; 0x09
    37dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	89 83       	std	Y+1, r24	; 0x01
    37e6:	9a 83       	std	Y+2, r25	; 0x02
    37e8:	ab 83       	std	Y+3, r26	; 0x03
    37ea:	bc 83       	std	Y+4, r27	; 0x04
				}
				A_u8Arr[i]= '.';
				i++;
				L_f32FloatPart*=10;
				u32 L_u32Temp=L_f32FloatPart;
				for(;L_u32Temp!=0;i++)
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	8f 5f       	subi	r24, 0xFF	; 255
    37f0:	8d 83       	std	Y+5, r24	; 0x05
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	ab 81       	ldd	r26, Y+3	; 0x03
    37f8:	bc 81       	ldd	r27, Y+4	; 0x04
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	a1 05       	cpc	r26, r1
    37fe:	b1 05       	cpc	r27, r1
    3800:	09 f0       	breq	.+2      	; 0x3804 <floatToString+0x1e0>
    3802:	a8 cf       	rjmp	.-176    	; 0x3754 <floatToString+0x130>
					L_f32FloatPart*=10;
					L_u32Temp=L_f32FloatPart;


			    }
}
    3804:	64 96       	adiw	r28, 0x14	; 20
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <LCD_vShiftCursor>:
void LCD_vShiftCursor(u8 A_u8ShiftDir)
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	0f 92       	push	r0
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	89 83       	std	Y+1, r24	; 0x01

}
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <LCD_vTurnOn>:
void LCD_vTurnOn()
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
	LCD_vInstruction(CMD_DISPLAY_ON);
    3836:	8c e0       	ldi	r24, 0x0C	; 12
    3838:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
}
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <LCD_vTurnOff>:
void LCD_vTurnOff()
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
	LCD_vInstruction(CMD_DISPLAY_OFF);
    384a:	88 e0       	ldi	r24, 0x08	; 8
    384c:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
}
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <LCD_vCreateCustomPattern>:
/* Creating a custom patterns
 * we multiply by 8 as we have 8 locations (5x8 dots, 8 rows) for each cell (only can create 8 patterns)
 * */

static void LCD_vCreateCustomPattern(u8 *A_u8Pattern, u8 A_u8Loc)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	6c 97       	sbiw	r28, 0x1c	; 28
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	9b 8f       	std	Y+27, r25	; 0x1b
    386c:	8a 8f       	std	Y+26, r24	; 0x1a
    386e:	6c 8f       	std	Y+28, r22	; 0x1c
	LCD_vInstruction(CMD_CGRAM_ADDRESS + A_u8Loc*8);
    3870:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	08 96       	adiw	r24, 0x08	; 8
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	88 0f       	add	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	0e 94 8a 19 	call	0x3314	; 0x3314 <LCD_vInstruction>
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a4 e3       	ldi	r26, 0x34	; 52
    388e:	b2 e4       	ldi	r27, 0x42	; 66
    3890:	8d 8b       	std	Y+21, r24	; 0x15
    3892:	9e 8b       	std	Y+22, r25	; 0x16
    3894:	af 8b       	std	Y+23, r26	; 0x17
    3896:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3898:	6d 89       	ldd	r22, Y+21	; 0x15
    389a:	7e 89       	ldd	r23, Y+22	; 0x16
    389c:	8f 89       	ldd	r24, Y+23	; 0x17
    389e:	98 8d       	ldd	r25, Y+24	; 0x18
    38a0:	2b ea       	ldi	r18, 0xAB	; 171
    38a2:	3a ea       	ldi	r19, 0xAA	; 170
    38a4:	4a e2       	ldi	r20, 0x2A	; 42
    38a6:	50 e4       	ldi	r21, 0x40	; 64
    38a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	89 8b       	std	Y+17, r24	; 0x11
    38b2:	9a 8b       	std	Y+18, r25	; 0x12
    38b4:	ab 8b       	std	Y+19, r26	; 0x13
    38b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    38b8:	69 89       	ldd	r22, Y+17	; 0x11
    38ba:	7a 89       	ldd	r23, Y+18	; 0x12
    38bc:	8b 89       	ldd	r24, Y+19	; 0x13
    38be:	9c 89       	ldd	r25, Y+20	; 0x14
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e8       	ldi	r20, 0x80	; 128
    38c6:	5f e3       	ldi	r21, 0x3F	; 63
    38c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38cc:	88 23       	and	r24, r24
    38ce:	1c f4       	brge	.+6      	; 0x38d6 <LCD_vCreateCustomPattern+0x80>
		__ticks = 1;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	88 8b       	std	Y+16, r24	; 0x10
    38d4:	91 c0       	rjmp	.+290    	; 0x39f8 <LCD_vCreateCustomPattern+0x1a2>
	else if (__tmp > 255)
    38d6:	69 89       	ldd	r22, Y+17	; 0x11
    38d8:	7a 89       	ldd	r23, Y+18	; 0x12
    38da:	8b 89       	ldd	r24, Y+19	; 0x13
    38dc:	9c 89       	ldd	r25, Y+20	; 0x14
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	53 e4       	ldi	r21, 0x43	; 67
    38e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	0c f0       	brlt	.+2      	; 0x38f0 <LCD_vCreateCustomPattern+0x9a>
    38ee:	7b c0       	rjmp	.+246    	; 0x39e6 <LCD_vCreateCustomPattern+0x190>
	{
		_delay_ms(__us / 1000.0);
    38f0:	6d 89       	ldd	r22, Y+21	; 0x15
    38f2:	7e 89       	ldd	r23, Y+22	; 0x16
    38f4:	8f 89       	ldd	r24, Y+23	; 0x17
    38f6:	98 8d       	ldd	r25, Y+24	; 0x18
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	4a e7       	ldi	r20, 0x7A	; 122
    38fe:	54 e4       	ldi	r21, 0x44	; 68
    3900:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	8c 87       	std	Y+12, r24	; 0x0c
    390a:	9d 87       	std	Y+13, r25	; 0x0d
    390c:	ae 87       	std	Y+14, r26	; 0x0e
    390e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	6c 85       	ldd	r22, Y+12	; 0x0c
    3912:	7d 85       	ldd	r23, Y+13	; 0x0d
    3914:	8e 85       	ldd	r24, Y+14	; 0x0e
    3916:	9f 85       	ldd	r25, Y+15	; 0x0f
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	88 87       	std	Y+8, r24	; 0x08
    392a:	99 87       	std	Y+9, r25	; 0x09
    392c:	aa 87       	std	Y+10, r26	; 0x0a
    392e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3930:	68 85       	ldd	r22, Y+8	; 0x08
    3932:	79 85       	ldd	r23, Y+9	; 0x09
    3934:	8a 85       	ldd	r24, Y+10	; 0x0a
    3936:	9b 85       	ldd	r25, Y+11	; 0x0b
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <LCD_vCreateCustomPattern+0xfc>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9f 83       	std	Y+7, r25	; 0x07
    394e:	8e 83       	std	Y+6, r24	; 0x06
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <LCD_vCreateCustomPattern+0x17a>
	else if (__tmp > 65535)
    3952:	68 85       	ldd	r22, Y+8	; 0x08
    3954:	79 85       	ldd	r23, Y+9	; 0x09
    3956:	8a 85       	ldd	r24, Y+10	; 0x0a
    3958:	9b 85       	ldd	r25, Y+11	; 0x0b
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <LCD_vCreateCustomPattern+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	6c 85       	ldd	r22, Y+12	; 0x0c
    396c:	7d 85       	ldd	r23, Y+13	; 0x0d
    396e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3970:	9f 85       	ldd	r25, Y+15	; 0x0f
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9f 83       	std	Y+7, r25	; 0x07
    3990:	8e 83       	std	Y+6, r24	; 0x06
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <LCD_vCreateCustomPattern+0x15c>
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9d 83       	std	Y+5, r25	; 0x05
    399a:	8c 83       	std	Y+4, r24	; 0x04
    399c:	8c 81       	ldd	r24, Y+4	; 0x04
    399e:	9d 81       	ldd	r25, Y+5	; 0x05
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <LCD_vCreateCustomPattern+0x14a>
    39a4:	9d 83       	std	Y+5, r25	; 0x05
    39a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8e 81       	ldd	r24, Y+6	; 0x06
    39aa:	9f 81       	ldd	r25, Y+7	; 0x07
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9f 83       	std	Y+7, r25	; 0x07
    39b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8e 81       	ldd	r24, Y+6	; 0x06
    39b4:	9f 81       	ldd	r25, Y+7	; 0x07
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <LCD_vCreateCustomPattern+0x13e>
    39ba:	24 c0       	rjmp	.+72     	; 0x3a04 <LCD_vCreateCustomPattern+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	68 85       	ldd	r22, Y+8	; 0x08
    39be:	79 85       	ldd	r23, Y+9	; 0x09
    39c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9f 83       	std	Y+7, r25	; 0x07
    39ce:	8e 83       	std	Y+6, r24	; 0x06
    39d0:	8e 81       	ldd	r24, Y+6	; 0x06
    39d2:	9f 81       	ldd	r25, Y+7	; 0x07
    39d4:	9b 83       	std	Y+3, r25	; 0x03
    39d6:	8a 83       	std	Y+2, r24	; 0x02
    39d8:	8a 81       	ldd	r24, Y+2	; 0x02
    39da:	9b 81       	ldd	r25, Y+3	; 0x03
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <LCD_vCreateCustomPattern+0x186>
    39e0:	9b 83       	std	Y+3, r25	; 0x03
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    39e4:	0f c0       	rjmp	.+30     	; 0x3a04 <LCD_vCreateCustomPattern+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39e6:	69 89       	ldd	r22, Y+17	; 0x11
    39e8:	7a 89       	ldd	r23, Y+18	; 0x12
    39ea:	8b 89       	ldd	r24, Y+19	; 0x13
    39ec:	9c 89       	ldd	r25, Y+20	; 0x14
    39ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	88 8b       	std	Y+16, r24	; 0x10
    39f8:	88 89       	ldd	r24, Y+16	; 0x10
    39fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	8a 95       	dec	r24
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <LCD_vCreateCustomPattern+0x1a8>
    3a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(45);
	for(u8 i=0; i<8; i++)
    3a04:	19 8e       	std	Y+25, r1	; 0x19
    3a06:	0e c0       	rjmp	.+28     	; 0x3a24 <LCD_vCreateCustomPattern+0x1ce>
	{
		LCD_vSendData(A_u8Pattern[i]);
    3a08:	89 8d       	ldd	r24, Y+25	; 0x19
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a12:	fc 01       	movw	r30, r24
    3a14:	e2 0f       	add	r30, r18
    3a16:	f3 1f       	adc	r31, r19
    3a18:	80 81       	ld	r24, Z
    3a1a:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_vSendData>

static void LCD_vCreateCustomPattern(u8 *A_u8Pattern, u8 A_u8Loc)
{
	LCD_vInstruction(CMD_CGRAM_ADDRESS + A_u8Loc*8);
	_delay_us(45);
	for(u8 i=0; i<8; i++)
    3a1e:	89 8d       	ldd	r24, Y+25	; 0x19
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	89 8f       	std	Y+25, r24	; 0x19
    3a24:	89 8d       	ldd	r24, Y+25	; 0x19
    3a26:	88 30       	cpi	r24, 0x08	; 8
    3a28:	78 f3       	brcs	.-34     	; 0x3a08 <LCD_vCreateCustomPattern+0x1b2>
	{
		LCD_vSendData(A_u8Pattern[i]);
	}
}
    3a2a:	6c 96       	adiw	r28, 0x1c	; 28
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <LCD_vDispCustomChar>:

void LCD_vDispCustomChar(u8 A_u8PatternId, u8 A_u8Row, u8 A_u8Col)
{
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	00 d0       	rcall	.+0      	; 0x3a42 <LCD_vDispCustomChar+0x6>
    3a42:	00 d0       	rcall	.+0      	; 0x3a44 <LCD_vDispCustomChar+0x8>
    3a44:	0f 92       	push	r0
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	6a 83       	std	Y+2, r22	; 0x02
    3a4e:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PatternId){
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	28 2f       	mov	r18, r24
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	3d 83       	std	Y+5, r19	; 0x05
    3a58:	2c 83       	std	Y+4, r18	; 0x04
    3a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	91 05       	cpc	r25, r1
    3a62:	b1 f0       	breq	.+44     	; 0x3a90 <LCD_vDispCustomChar+0x54>
    3a64:	2c 81       	ldd	r18, Y+4	; 0x04
    3a66:	3d 81       	ldd	r19, Y+5	; 0x05
    3a68:	22 30       	cpi	r18, 0x02	; 2
    3a6a:	31 05       	cpc	r19, r1
    3a6c:	f1 f0       	breq	.+60     	; 0x3aaa <LCD_vDispCustomChar+0x6e>
    3a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a70:	9d 81       	ldd	r25, Y+5	; 0x05
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	31 f5       	brne	.+76     	; 0x3ac2 <LCD_vDispCustomChar+0x86>

		case PATTERN0_ID: LCD_vCreateCustomPattern(G_u8Pattern0, 0); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(0); break;
    3a76:	82 e9       	ldi	r24, 0x92	; 146
    3a78:	91 e0       	ldi	r25, 0x01	; 1
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_vCreateCustomPattern>
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	6b 81       	ldd	r22, Y+3	; 0x03
    3a84:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_vSetPos>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_vSendData>
    3a8e:	19 c0       	rjmp	.+50     	; 0x3ac2 <LCD_vDispCustomChar+0x86>
		case PATTERN1_ID: LCD_vCreateCustomPattern(G_u8Pattern1, 1); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(1); break;
    3a90:	8a e9       	ldi	r24, 0x9A	; 154
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	61 e0       	ldi	r22, 0x01	; 1
    3a96:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_vCreateCustomPattern>
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	6b 81       	ldd	r22, Y+3	; 0x03
    3a9e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_vSetPos>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_vSendData>
    3aa8:	0c c0       	rjmp	.+24     	; 0x3ac2 <LCD_vDispCustomChar+0x86>
		case PATTERN2_ID: LCD_vCreateCustomPattern(G_u8Pattern2, 2); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(2); break;
    3aaa:	82 ea       	ldi	r24, 0xA2	; 162
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	62 e0       	ldi	r22, 0x02	; 2
    3ab0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_vCreateCustomPattern>
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	6b 81       	ldd	r22, Y+3	; 0x03
    3ab8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_vSetPos>
    3abc:	82 e0       	ldi	r24, 0x02	; 2
    3abe:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_vSendData>
		case PATTERN5_ID: LCD_vCreateCustomPattern(G_u8Pattern5, 5); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(0); break;
		case PATTERN6_ID: LCD_vCreateCustomPattern(G_u8Pattern6, 6); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(0); break;
		case PATTERN7_ID: LCD_vCreateCustomPattern(G_u8Pattern7, 7); LCD_vSetPos(A_u8Row, A_u8Col);LCD_vSendData(0); break;
		*/
	}
}
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <BTN_vInt>:
#include "BTN_pri.h"
#include"BTN_cfg.h"
#include"BTN_int.h"

void BTN_vInt(u8 A_u8BtnId)
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <BTN_vInt+0x6>
    3ad8:	0f 92       	push	r0
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8BtnId)
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	28 2f       	mov	r18, r24
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	3b 83       	std	Y+3, r19	; 0x03
    3ae8:	2a 83       	std	Y+2, r18	; 0x02
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	9b 81       	ldd	r25, Y+3	; 0x03
    3aee:	83 30       	cpi	r24, 0x03	; 3
    3af0:	91 05       	cpc	r25, r1
    3af2:	d9 f1       	breq	.+118    	; 0x3b6a <BTN_vInt+0x98>
    3af4:	2a 81       	ldd	r18, Y+2	; 0x02
    3af6:	3b 81       	ldd	r19, Y+3	; 0x03
    3af8:	24 30       	cpi	r18, 0x04	; 4
    3afa:	31 05       	cpc	r19, r1
    3afc:	7c f4       	brge	.+30     	; 0x3b1c <BTN_vInt+0x4a>
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	81 30       	cpi	r24, 0x01	; 1
    3b04:	91 05       	cpc	r25, r1
    3b06:	29 f1       	breq	.+74     	; 0x3b52 <BTN_vInt+0x80>
    3b08:	2a 81       	ldd	r18, Y+2	; 0x02
    3b0a:	3b 81       	ldd	r19, Y+3	; 0x03
    3b0c:	22 30       	cpi	r18, 0x02	; 2
    3b0e:	31 05       	cpc	r19, r1
    3b10:	34 f5       	brge	.+76     	; 0x3b5e <BTN_vInt+0x8c>
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	00 97       	sbiw	r24, 0x00	; 0
    3b18:	b1 f0       	breq	.+44     	; 0x3b46 <BTN_vInt+0x74>
    3b1a:	44 c0       	rjmp	.+136    	; 0x3ba4 <BTN_vInt+0xd2>
    3b1c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b1e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b20:	25 30       	cpi	r18, 0x05	; 5
    3b22:	31 05       	cpc	r19, r1
    3b24:	71 f1       	breq	.+92     	; 0x3b82 <BTN_vInt+0xb0>
    3b26:	8a 81       	ldd	r24, Y+2	; 0x02
    3b28:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2a:	85 30       	cpi	r24, 0x05	; 5
    3b2c:	91 05       	cpc	r25, r1
    3b2e:	1c f1       	brlt	.+70     	; 0x3b76 <BTN_vInt+0xa4>
    3b30:	2a 81       	ldd	r18, Y+2	; 0x02
    3b32:	3b 81       	ldd	r19, Y+3	; 0x03
    3b34:	26 30       	cpi	r18, 0x06	; 6
    3b36:	31 05       	cpc	r19, r1
    3b38:	51 f1       	breq	.+84     	; 0x3b8e <BTN_vInt+0xbc>
    3b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3e:	87 30       	cpi	r24, 0x07	; 7
    3b40:	91 05       	cpc	r25, r1
    3b42:	59 f1       	breq	.+86     	; 0x3b9a <BTN_vInt+0xc8>
    3b44:	2f c0       	rjmp	.+94     	; 0x3ba4 <BTN_vInt+0xd2>
	{
	case BTN0_ID:DIO_vPinDir(BTN0_PORT,BTN0_ID,DIR_INPUT);break;
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	60 e0       	ldi	r22, 0x00	; 0
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b50:	29 c0       	rjmp	.+82     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN1_ID:DIO_vPinDir(BTN1_PORT,BTN1_ID,DIR_INPUT);break;
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	40 e0       	ldi	r20, 0x00	; 0
    3b58:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b5c:	23 c0       	rjmp	.+70     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN2_ID:DIO_vPinDir(BTN2_PORT,BTN2_ID,DIR_INPUT);break;
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	62 e0       	ldi	r22, 0x02	; 2
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b68:	1d c0       	rjmp	.+58     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN3_ID:DIO_vPinDir(BTN3_PORT,BTN3_ID,DIR_INPUT);break;
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	63 e0       	ldi	r22, 0x03	; 3
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b74:	17 c0       	rjmp	.+46     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN4_ID:DIO_vPinDir(BTN4_PORT,BTN4_ID,DIR_INPUT);break;
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	64 e0       	ldi	r22, 0x04	; 4
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b80:	11 c0       	rjmp	.+34     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN5_ID:DIO_vPinDir(BTN5_PORT,BTN5_ID,DIR_INPUT);break;
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	65 e0       	ldi	r22, 0x05	; 5
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b8c:	0b c0       	rjmp	.+22     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN6_ID:DIO_vPinDir(BTN6_PORT,BTN6_ID,DIR_INPUT);break;
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	66 e0       	ldi	r22, 0x06	; 6
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <BTN_vInt+0xd2>
	case BTN7_ID:DIO_vPinDir(BTN7_PORT,BTN7_ID,DIR_INPUT);break;
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	67 e0       	ldi	r22, 0x07	; 7
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_vPinDir>
		case BTN5_ID:DIO_vSetPinVal(BTN5_PORT,BTN5_ID,DIR_OUTPUT);break;
		case BTN6_ID:DIO_vSetPinVal(BTN6_PORT,BTN6_ID,DIR_OUTPUT);break;
		case BTN7_ID:DIO_vSetPinVal(BTN7_PORT,BTN7_ID,DIR_OUTPUT);break;
		}
#endif
}
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <BTN_u8GetState>:
u8 BTN_u8GetState(u8 A_u8BtnId)
{u8 L_u8BtnState;
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <BTN_u8GetState+0x6>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <BTN_u8GetState+0x8>
    3bb8:	0f 92       	push	r0
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
u8 L_u8ResState;
	switch(A_u8BtnId)
    3bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	3d 83       	std	Y+5, r19	; 0x05
    3bc8:	2c 83       	std	Y+4, r18	; 0x04
    3bca:	8c 81       	ldd	r24, Y+4	; 0x04
    3bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bce:	83 30       	cpi	r24, 0x03	; 3
    3bd0:	91 05       	cpc	r25, r1
    3bd2:	d9 f1       	breq	.+118    	; 0x3c4a <BTN_u8GetState+0x9a>
    3bd4:	2c 81       	ldd	r18, Y+4	; 0x04
    3bd6:	3d 81       	ldd	r19, Y+5	; 0x05
    3bd8:	24 30       	cpi	r18, 0x04	; 4
    3bda:	31 05       	cpc	r19, r1
    3bdc:	7c f4       	brge	.+30     	; 0x3bfc <BTN_u8GetState+0x4c>
    3bde:	8c 81       	ldd	r24, Y+4	; 0x04
    3be0:	9d 81       	ldd	r25, Y+5	; 0x05
    3be2:	81 30       	cpi	r24, 0x01	; 1
    3be4:	91 05       	cpc	r25, r1
    3be6:	29 f1       	breq	.+74     	; 0x3c32 <BTN_u8GetState+0x82>
    3be8:	2c 81       	ldd	r18, Y+4	; 0x04
    3bea:	3d 81       	ldd	r19, Y+5	; 0x05
    3bec:	22 30       	cpi	r18, 0x02	; 2
    3bee:	31 05       	cpc	r19, r1
    3bf0:	34 f5       	brge	.+76     	; 0x3c3e <BTN_u8GetState+0x8e>
    3bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf6:	00 97       	sbiw	r24, 0x00	; 0
    3bf8:	b1 f0       	breq	.+44     	; 0x3c26 <BTN_u8GetState+0x76>
    3bfa:	44 c0       	rjmp	.+136    	; 0x3c84 <BTN_u8GetState+0xd4>
    3bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    3bfe:	3d 81       	ldd	r19, Y+5	; 0x05
    3c00:	25 30       	cpi	r18, 0x05	; 5
    3c02:	31 05       	cpc	r19, r1
    3c04:	71 f1       	breq	.+92     	; 0x3c62 <BTN_u8GetState+0xb2>
    3c06:	8c 81       	ldd	r24, Y+4	; 0x04
    3c08:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0a:	85 30       	cpi	r24, 0x05	; 5
    3c0c:	91 05       	cpc	r25, r1
    3c0e:	1c f1       	brlt	.+70     	; 0x3c56 <BTN_u8GetState+0xa6>
    3c10:	2c 81       	ldd	r18, Y+4	; 0x04
    3c12:	3d 81       	ldd	r19, Y+5	; 0x05
    3c14:	26 30       	cpi	r18, 0x06	; 6
    3c16:	31 05       	cpc	r19, r1
    3c18:	51 f1       	breq	.+84     	; 0x3c6e <BTN_u8GetState+0xbe>
    3c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c1e:	87 30       	cpi	r24, 0x07	; 7
    3c20:	91 05       	cpc	r25, r1
    3c22:	59 f1       	breq	.+86     	; 0x3c7a <BTN_u8GetState+0xca>
    3c24:	2f c0       	rjmp	.+94     	; 0x3c84 <BTN_u8GetState+0xd4>
		{
		case BTN0_ID:L_u8BtnState=DIO_u8GetPinVal(BTN0_PORT,BTN0_ID);break;
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	29 c0       	rjmp	.+82     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN1_ID:L_u8BtnState=DIO_u8GetPinVal(BTN1_PORT,BTN1_ID);break;
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c3a:	8a 83       	std	Y+2, r24	; 0x02
    3c3c:	23 c0       	rjmp	.+70     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN2_ID:L_u8BtnState=DIO_u8GetPinVal(BTN2_PORT,BTN2_ID);break;
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	62 e0       	ldi	r22, 0x02	; 2
    3c42:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c46:	8a 83       	std	Y+2, r24	; 0x02
    3c48:	1d c0       	rjmp	.+58     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN3_ID:L_u8BtnState=DIO_u8GetPinVal(BTN3_PORT,BTN3_ID);break;
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	63 e0       	ldi	r22, 0x03	; 3
    3c4e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c52:	8a 83       	std	Y+2, r24	; 0x02
    3c54:	17 c0       	rjmp	.+46     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN4_ID:L_u8BtnState=DIO_u8GetPinVal(BTN4_PORT,BTN4_ID);break;
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	64 e0       	ldi	r22, 0x04	; 4
    3c5a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c5e:	8a 83       	std	Y+2, r24	; 0x02
    3c60:	11 c0       	rjmp	.+34     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN5_ID:L_u8BtnState=DIO_u8GetPinVal(BTN5_PORT,BTN5_ID);break;
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	65 e0       	ldi	r22, 0x05	; 5
    3c66:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	0b c0       	rjmp	.+22     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN6_ID:L_u8BtnState=DIO_u8GetPinVal(BTN6_PORT,BTN6_ID);break;
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	66 e0       	ldi	r22, 0x06	; 6
    3c72:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c76:	8a 83       	std	Y+2, r24	; 0x02
    3c78:	05 c0       	rjmp	.+10     	; 0x3c84 <BTN_u8GetState+0xd4>
		case BTN7_ID:L_u8BtnState=DIO_u8GetPinVal(BTN7_PORT,BTN7_ID);break;
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	67 e0       	ldi	r22, 0x07	; 7
    3c7e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_u8GetPinVal>
    3c82:	8a 83       	std	Y+2, r24	; 0x02
		}
if(L_u8BtnState==0)
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	88 23       	and	r24, r24
    3c88:	19 f4       	brne	.+6      	; 0x3c90 <BTN_u8GetState+0xe0>
	L_u8ResState=BTN_ON;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <BTN_u8GetState+0xe2>
else
	L_u8ResState=BTN_OFF;
    3c90:	19 82       	std	Y+1, r1	; 0x01
	return L_u8ResState;
    3c92:	89 81       	ldd	r24, Y+1	; 0x01

}
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <main>:
s8 G_s8Counts0 =0;
s8 G_s8Counts1 =0;


int main(void)
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	6e 97       	sbiw	r28, 0x1e	; 30
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61


	UART_vInit();
    3cb8:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_vInit>
	SERVO_vInit();
    3cbc:	0e 94 25 11 	call	0x224a	; 0x224a <SERVO_vInit>
	SSD_vINT(SSD1_ID);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	0e 94 03 10 	call	0x2006	; 0x2006 <SSD_vINT>
	SSD_vINT(SSD0_ID);
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	0e 94 03 10 	call	0x2006	; 0x2006 <SSD_vINT>
	LDR_vInt();
    3ccc:	0e 94 a9 13 	call	0x2752	; 0x2752 <LDR_vInt>




	LED_vInt(LED2_ID);
    3cd0:	82 e0       	ldi	r24, 0x02	; 2
    3cd2:	0e 94 30 12 	call	0x2460	; 0x2460 <LED_vInt>
	LED_vInt(LED3_ID);
    3cd6:	83 e0       	ldi	r24, 0x03	; 3
    3cd8:	0e 94 30 12 	call	0x2460	; 0x2460 <LED_vInt>
	LED_vInt(LED4_ID);
    3cdc:	84 e0       	ldi	r24, 0x04	; 4
    3cde:	0e 94 30 12 	call	0x2460	; 0x2460 <LED_vInt>
	LED_vInt(LED6_ID);
    3ce2:	86 e0       	ldi	r24, 0x06	; 6
    3ce4:	0e 94 30 12 	call	0x2460	; 0x2460 <LED_vInt>
	SSD_vDisplayNum(SSD0_ID,G_s8Counts0);
    3ce8:	80 91 c0 01 	lds	r24, 0x01C0
    3cec:	98 2f       	mov	r25, r24
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	69 2f       	mov	r22, r25
    3cf2:	0e 94 90 10 	call	0x2120	; 0x2120 <SSD_vDisplayNum>
	SSD1_vDisplayNum(G_s8Counts1);
    3cf6:	80 91 c1 01 	lds	r24, 0x01C1
    3cfa:	0e 94 02 11 	call	0x2204	; 0x2204 <SSD1_vDisplayNum>
		//if(50>LDR_u16GetLDR_Res(LDR_PIN0))
		//if(BTN_u8GetState(BTN6_ID)==1)
		//UART_vSend_String((u8*)"hello");
		//LCD_vDispNum(LDR_u16GetLDR_Res(LDR_PIN6));

		if(200<LDR_u16GetLDR_Res(LDR_PIN6))/*kimt LDR*/
    3cfe:	86 e0       	ldi	r24, 0x06	; 6
    3d00:	0e 94 b2 13 	call	0x2764	; 0x2764 <LDR_u16GetLDR_Res>
    3d04:	89 3c       	cpi	r24, 0xC9	; 201
    3d06:	91 05       	cpc	r25, r1
    3d08:	08 f4       	brcc	.+2      	; 0x3d0c <main+0x68>
    3d0a:	ad c0       	rjmp	.+346    	; 0x3e66 <main+0x1c2>
		//if(1)
		{
			u8 L_u8Reply0;
			if(G_s8Counts0!=9||G_s8Counts1!=9)
    3d0c:	80 91 c0 01 	lds	r24, 0x01C0
    3d10:	89 30       	cpi	r24, 0x09	; 9
    3d12:	29 f4       	brne	.+10     	; 0x3d1e <main+0x7a>
    3d14:	80 91 c1 01 	lds	r24, 0x01C1
    3d18:	89 30       	cpi	r24, 0x09	; 9
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <main+0x7a>
    3d1c:	57 c1       	rjmp	.+686    	; 0x3fcc <main+0x328>
			{
				UART_vSend_String((u8*)"I");
    3d1e:	80 e6       	ldi	r24, 0x60	; 96
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_vSend_String>


				L_u8Reply0=UART_u8GetData();
    3d26:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_u8GetData>
    3d2a:	8e 8f       	std	Y+30, r24	; 0x1e



				if(L_u8Reply0=='y'||L_u8Reply0=='Y')
    3d2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d2e:	89 37       	cpi	r24, 0x79	; 121
    3d30:	21 f0       	breq	.+8      	; 0x3d3a <main+0x96>
    3d32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d34:	89 35       	cpi	r24, 0x59	; 89
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <main+0x96>
    3d38:	49 c1       	rjmp	.+658    	; 0x3fcc <main+0x328>
				{
					/*LED indicate car enter*/
					LED_vTurnOn(LED2_ID);//green1
    3d3a:	82 e0       	ldi	r24, 0x02	; 2
    3d3c:	0e 94 9f 12 	call	0x253e	; 0x253e <LED_vTurnOn>
					LED_vTurnOn(LED6_ID);//red2
    3d40:	86 e0       	ldi	r24, 0x06	; 6
    3d42:	0e 94 9f 12 	call	0x253e	; 0x253e <LED_vTurnOn>
					/*open gate*/
					SERVO0_vAngle(LEFT);
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SERVO0_vAngle>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	aa e7       	ldi	r26, 0x7A	; 122
    3d52:	b5 e4       	ldi	r27, 0x45	; 69
    3d54:	89 8f       	std	Y+25, r24	; 0x19
    3d56:	9a 8f       	std	Y+26, r25	; 0x1a
    3d58:	ab 8f       	std	Y+27, r26	; 0x1b
    3d5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	4a ef       	ldi	r20, 0xFA	; 250
    3d6a:	54 e4       	ldi	r21, 0x44	; 68
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	8d 8b       	std	Y+21, r24	; 0x15
    3d76:	9e 8b       	std	Y+22, r25	; 0x16
    3d78:	af 8b       	std	Y+23, r26	; 0x17
    3d7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d80:	8f 89       	ldd	r24, Y+23	; 0x17
    3d82:	98 8d       	ldd	r25, Y+24	; 0x18
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e8       	ldi	r20, 0x80	; 128
    3d8a:	5f e3       	ldi	r21, 0x3F	; 63
    3d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d90:	88 23       	and	r24, r24
    3d92:	2c f4       	brge	.+10     	; 0x3d9e <main+0xfa>
		__ticks = 1;
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	9c 8b       	std	Y+20, r25	; 0x14
    3d9a:	8b 8b       	std	Y+19, r24	; 0x13
    3d9c:	3f c0       	rjmp	.+126    	; 0x3e1c <main+0x178>
	else if (__tmp > 65535)
    3d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3da0:	7e 89       	ldd	r23, Y+22	; 0x16
    3da2:	8f 89       	ldd	r24, Y+23	; 0x17
    3da4:	98 8d       	ldd	r25, Y+24	; 0x18
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	3f ef       	ldi	r19, 0xFF	; 255
    3daa:	4f e7       	ldi	r20, 0x7F	; 127
    3dac:	57 e4       	ldi	r21, 0x47	; 71
    3dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3db2:	18 16       	cp	r1, r24
    3db4:	4c f5       	brge	.+82     	; 0x3e08 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db6:	69 8d       	ldd	r22, Y+25	; 0x19
    3db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e2       	ldi	r20, 0x20	; 32
    3dc4:	51 e4       	ldi	r21, 0x41	; 65
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	9c 8b       	std	Y+20, r25	; 0x14
    3ddc:	8b 8b       	std	Y+19, r24	; 0x13
    3dde:	0f c0       	rjmp	.+30     	; 0x3dfe <main+0x15a>
    3de0:	88 ec       	ldi	r24, 0xC8	; 200
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9a 8b       	std	Y+18, r25	; 0x12
    3de6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3de8:	89 89       	ldd	r24, Y+17	; 0x11
    3dea:	9a 89       	ldd	r25, Y+18	; 0x12
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <main+0x148>
    3df0:	9a 8b       	std	Y+18, r25	; 0x12
    3df2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df4:	8b 89       	ldd	r24, Y+19	; 0x13
    3df6:	9c 89       	ldd	r25, Y+20	; 0x14
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	9c 8b       	std	Y+20, r25	; 0x14
    3dfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    3e00:	9c 89       	ldd	r25, Y+20	; 0x14
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	69 f7       	brne	.-38     	; 0x3de0 <main+0x13c>
    3e06:	14 c0       	rjmp	.+40     	; 0x3e30 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e08:	6d 89       	ldd	r22, Y+21	; 0x15
    3e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	9c 8b       	std	Y+20, r25	; 0x14
    3e1a:	8b 8b       	std	Y+19, r24	; 0x13
    3e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e20:	98 8b       	std	Y+16, r25	; 0x10
    3e22:	8f 87       	std	Y+15, r24	; 0x0f
    3e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e26:	98 89       	ldd	r25, Y+16	; 0x10
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	f1 f7       	brne	.-4      	; 0x3e28 <main+0x184>
    3e2c:	98 8b       	std	Y+16, r25	; 0x10
    3e2e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(4000);
					/*close gate*/
					SERVO0_vAngle(RIGHT);
    3e30:	84 eb       	ldi	r24, 0xB4	; 180
    3e32:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SERVO0_vAngle>
					LED_vTurnOff(LED2_ID);//green1
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	0e 94 0e 13 	call	0x261c	; 0x261c <LED_vTurnOff>
					LED_vTurnOff(LED6_ID);//red2
    3e3c:	86 e0       	ldi	r24, 0x06	; 6
    3e3e:	0e 94 0e 13 	call	0x261c	; 0x261c <LED_vTurnOff>
					G_s8Counts0++;
    3e42:	80 91 c0 01 	lds	r24, 0x01C0
    3e46:	8f 5f       	subi	r24, 0xFF	; 255
    3e48:	80 93 c0 01 	sts	0x01C0, r24
					//_delay_ms(500);
					if(G_s8Counts0==10)
    3e4c:	80 91 c0 01 	lds	r24, 0x01C0
    3e50:	8a 30       	cpi	r24, 0x0A	; 10
    3e52:	09 f0       	breq	.+2      	; 0x3e56 <main+0x1b2>
    3e54:	bb c0       	rjmp	.+374    	; 0x3fcc <main+0x328>
					{
						G_s8Counts0=0;
    3e56:	10 92 c0 01 	sts	0x01C0, r1
						G_s8Counts1 ++;
    3e5a:	80 91 c1 01 	lds	r24, 0x01C1
    3e5e:	8f 5f       	subi	r24, 0xFF	; 255
    3e60:	80 93 c1 01 	sts	0x01C1, r24
    3e64:	b3 c0       	rjmp	.+358    	; 0x3fcc <main+0x328>
			}

		}


		else if(200<LDR_u16GetLDR_Res(LDR_PIN7))/*Kimt LDR*/
    3e66:	87 e0       	ldi	r24, 0x07	; 7
    3e68:	0e 94 b2 13 	call	0x2764	; 0x2764 <LDR_u16GetLDR_Res>
    3e6c:	89 3c       	cpi	r24, 0xC9	; 201
    3e6e:	91 05       	cpc	r25, r1
    3e70:	08 f4       	brcc	.+2      	; 0x3e74 <main+0x1d0>
    3e72:	ac c0       	rjmp	.+344    	; 0x3fcc <main+0x328>
		{
			u8 L_u8Reply1;
			if(G_s8Counts0>0||G_s8Counts1>0)
    3e74:	80 91 c0 01 	lds	r24, 0x01C0
    3e78:	18 16       	cp	r1, r24
    3e7a:	2c f0       	brlt	.+10     	; 0x3e86 <main+0x1e2>
    3e7c:	80 91 c1 01 	lds	r24, 0x01C1
    3e80:	18 16       	cp	r1, r24
    3e82:	0c f0       	brlt	.+2      	; 0x3e86 <main+0x1e2>
    3e84:	a3 c0       	rjmp	.+326    	; 0x3fcc <main+0x328>
			{
				UART_vSend_String((u8*)"O");
    3e86:	82 e6       	ldi	r24, 0x62	; 98
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_vSend_String>

				L_u8Reply1=UART_u8GetData();
    3e8e:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_u8GetData>
    3e92:	8d 8f       	std	Y+29, r24	; 0x1d

				if(L_u8Reply1=='y'||L_u8Reply1=='Y')
    3e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e96:	89 37       	cpi	r24, 0x79	; 121
    3e98:	21 f0       	breq	.+8      	; 0x3ea2 <main+0x1fe>
    3e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e9c:	89 35       	cpi	r24, 0x59	; 89
    3e9e:	09 f0       	breq	.+2      	; 0x3ea2 <main+0x1fe>
    3ea0:	95 c0       	rjmp	.+298    	; 0x3fcc <main+0x328>
				{
					/*LED indicate car exist*/
					LED_vTurnOn(LED3_ID);//green2
    3ea2:	83 e0       	ldi	r24, 0x03	; 3
    3ea4:	0e 94 9f 12 	call	0x253e	; 0x253e <LED_vTurnOn>
					LED_vTurnOn(LED4_ID);//red1
    3ea8:	84 e0       	ldi	r24, 0x04	; 4
    3eaa:	0e 94 9f 12 	call	0x253e	; 0x253e <LED_vTurnOn>
					/*open gate*/
					SERVO0_vAngle(LEFT);
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SERVO0_vAngle>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	aa ef       	ldi	r26, 0xFA	; 250
    3eba:	b4 e4       	ldi	r27, 0x44	; 68
    3ebc:	8b 87       	std	Y+11, r24	; 0x0b
    3ebe:	9c 87       	std	Y+12, r25	; 0x0c
    3ec0:	ad 87       	std	Y+13, r26	; 0x0d
    3ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a ef       	ldi	r20, 0xFA	; 250
    3ed2:	54 e4       	ldi	r21, 0x44	; 68
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8f 83       	std	Y+7, r24	; 0x07
    3ede:	98 87       	std	Y+8, r25	; 0x08
    3ee0:	a9 87       	std	Y+9, r26	; 0x09
    3ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	2c f4       	brge	.+10     	; 0x3f06 <main+0x262>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	3f c0       	rjmp	.+126    	; 0x3f84 <main+0x2e0>
	else if (__tmp > 65535)
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	3f ef       	ldi	r19, 0xFF	; 255
    3f12:	4f e7       	ldi	r20, 0x7F	; 127
    3f14:	57 e4       	ldi	r21, 0x47	; 71
    3f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1a:	18 16       	cp	r1, r24
    3f1c:	4c f5       	brge	.+82     	; 0x3f70 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e2       	ldi	r20, 0x20	; 32
    3f2c:	51 e4       	ldi	r21, 0x41	; 65
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9e 83       	std	Y+6, r25	; 0x06
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	0f c0       	rjmp	.+30     	; 0x3f66 <main+0x2c2>
    3f48:	88 ec       	ldi	r24, 0xC8	; 200
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <main+0x2b0>
    3f58:	9c 83       	std	Y+4, r25	; 0x04
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	69 f7       	brne	.-38     	; 0x3f48 <main+0x2a4>
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	9a 83       	std	Y+2, r25	; 0x02
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <main+0x2ec>
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					LED_vTurnOff(LED3_ID);//green2
    3f98:	83 e0       	ldi	r24, 0x03	; 3
    3f9a:	0e 94 0e 13 	call	0x261c	; 0x261c <LED_vTurnOff>
					LED_vTurnOff(LED4_ID);//red1
    3f9e:	84 e0       	ldi	r24, 0x04	; 4
    3fa0:	0e 94 0e 13 	call	0x261c	; 0x261c <LED_vTurnOff>
					/*close gate*/
					SERVO0_vAngle(RIGHT);
    3fa4:	84 eb       	ldi	r24, 0xB4	; 180
    3fa6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SERVO0_vAngle>
					G_s8Counts0--;
    3faa:	80 91 c0 01 	lds	r24, 0x01C0
    3fae:	81 50       	subi	r24, 0x01	; 1
    3fb0:	80 93 c0 01 	sts	0x01C0, r24
					if(G_s8Counts0<0)
    3fb4:	80 91 c0 01 	lds	r24, 0x01C0
    3fb8:	88 23       	and	r24, r24
    3fba:	44 f4       	brge	.+16     	; 0x3fcc <main+0x328>
					{
						G_s8Counts0=9;
    3fbc:	89 e0       	ldi	r24, 0x09	; 9
    3fbe:	80 93 c0 01 	sts	0x01C0, r24
						G_s8Counts1--;
    3fc2:	80 91 c1 01 	lds	r24, 0x01C1
    3fc6:	81 50       	subi	r24, 0x01	; 1
    3fc8:	80 93 c1 01 	sts	0x01C1, r24
					}
				}
			}

		}
		LCD_vDispNum(LDR_u16GetLDR_Res(LDR_PIN7));
    3fcc:	87 e0       	ldi	r24, 0x07	; 7
    3fce:	0e 94 b2 13 	call	0x2764	; 0x2764 <LDR_u16GetLDR_Res>
    3fd2:	cc 01       	movw	r24, r24
    3fd4:	a0 e0       	ldi	r26, 0x00	; 0
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	bc 01       	movw	r22, r24
    3fda:	cd 01       	movw	r24, r26
    3fdc:	0e 94 66 18 	call	0x30cc	; 0x30cc <LCD_vDispNum>



		SSD_vDisplayNum(SSD0_ID,G_s8Counts0);
    3fe0:	80 91 c0 01 	lds	r24, 0x01C0
    3fe4:	98 2f       	mov	r25, r24
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	69 2f       	mov	r22, r25
    3fea:	0e 94 90 10 	call	0x2120	; 0x2120 <SSD_vDisplayNum>
		SSD1_vDisplayNum(G_s8Counts1);
    3fee:	80 91 c1 01 	lds	r24, 0x01C1
    3ff2:	0e 94 02 11 	call	0x2204	; 0x2204 <SSD1_vDisplayNum>
    3ff6:	83 ce       	rjmp	.-762    	; 0x3cfe <main+0x5a>

00003ff8 <__udivmodhi4>:
    3ff8:	aa 1b       	sub	r26, r26
    3ffa:	bb 1b       	sub	r27, r27
    3ffc:	51 e1       	ldi	r21, 0x11	; 17
    3ffe:	07 c0       	rjmp	.+14     	; 0x400e <__udivmodhi4_ep>

00004000 <__udivmodhi4_loop>:
    4000:	aa 1f       	adc	r26, r26
    4002:	bb 1f       	adc	r27, r27
    4004:	a6 17       	cp	r26, r22
    4006:	b7 07       	cpc	r27, r23
    4008:	10 f0       	brcs	.+4      	; 0x400e <__udivmodhi4_ep>
    400a:	a6 1b       	sub	r26, r22
    400c:	b7 0b       	sbc	r27, r23

0000400e <__udivmodhi4_ep>:
    400e:	88 1f       	adc	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	5a 95       	dec	r21
    4014:	a9 f7       	brne	.-22     	; 0x4000 <__udivmodhi4_loop>
    4016:	80 95       	com	r24
    4018:	90 95       	com	r25
    401a:	bc 01       	movw	r22, r24
    401c:	cd 01       	movw	r24, r26
    401e:	08 95       	ret

00004020 <__udivmodsi4>:
    4020:	a1 e2       	ldi	r26, 0x21	; 33
    4022:	1a 2e       	mov	r1, r26
    4024:	aa 1b       	sub	r26, r26
    4026:	bb 1b       	sub	r27, r27
    4028:	fd 01       	movw	r30, r26
    402a:	0d c0       	rjmp	.+26     	; 0x4046 <__udivmodsi4_ep>

0000402c <__udivmodsi4_loop>:
    402c:	aa 1f       	adc	r26, r26
    402e:	bb 1f       	adc	r27, r27
    4030:	ee 1f       	adc	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	a2 17       	cp	r26, r18
    4036:	b3 07       	cpc	r27, r19
    4038:	e4 07       	cpc	r30, r20
    403a:	f5 07       	cpc	r31, r21
    403c:	20 f0       	brcs	.+8      	; 0x4046 <__udivmodsi4_ep>
    403e:	a2 1b       	sub	r26, r18
    4040:	b3 0b       	sbc	r27, r19
    4042:	e4 0b       	sbc	r30, r20
    4044:	f5 0b       	sbc	r31, r21

00004046 <__udivmodsi4_ep>:
    4046:	66 1f       	adc	r22, r22
    4048:	77 1f       	adc	r23, r23
    404a:	88 1f       	adc	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	1a 94       	dec	r1
    4050:	69 f7       	brne	.-38     	; 0x402c <__udivmodsi4_loop>
    4052:	60 95       	com	r22
    4054:	70 95       	com	r23
    4056:	80 95       	com	r24
    4058:	90 95       	com	r25
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	bd 01       	movw	r22, r26
    4060:	cf 01       	movw	r24, r30
    4062:	08 95       	ret

00004064 <__prologue_saves__>:
    4064:	2f 92       	push	r2
    4066:	3f 92       	push	r3
    4068:	4f 92       	push	r4
    406a:	5f 92       	push	r5
    406c:	6f 92       	push	r6
    406e:	7f 92       	push	r7
    4070:	8f 92       	push	r8
    4072:	9f 92       	push	r9
    4074:	af 92       	push	r10
    4076:	bf 92       	push	r11
    4078:	cf 92       	push	r12
    407a:	df 92       	push	r13
    407c:	ef 92       	push	r14
    407e:	ff 92       	push	r15
    4080:	0f 93       	push	r16
    4082:	1f 93       	push	r17
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	ca 1b       	sub	r28, r26
    408e:	db 0b       	sbc	r29, r27
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	f8 94       	cli
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	09 94       	ijmp

0000409c <__epilogue_restores__>:
    409c:	2a 88       	ldd	r2, Y+18	; 0x12
    409e:	39 88       	ldd	r3, Y+17	; 0x11
    40a0:	48 88       	ldd	r4, Y+16	; 0x10
    40a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    40a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    40a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    40a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    40aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    40ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    40ae:	b9 84       	ldd	r11, Y+9	; 0x09
    40b0:	c8 84       	ldd	r12, Y+8	; 0x08
    40b2:	df 80       	ldd	r13, Y+7	; 0x07
    40b4:	ee 80       	ldd	r14, Y+6	; 0x06
    40b6:	fd 80       	ldd	r15, Y+5	; 0x05
    40b8:	0c 81       	ldd	r16, Y+4	; 0x04
    40ba:	1b 81       	ldd	r17, Y+3	; 0x03
    40bc:	aa 81       	ldd	r26, Y+2	; 0x02
    40be:	b9 81       	ldd	r27, Y+1	; 0x01
    40c0:	ce 0f       	add	r28, r30
    40c2:	d1 1d       	adc	r29, r1
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	ed 01       	movw	r28, r26
    40d0:	08 95       	ret

000040d2 <_exit>:
    40d2:	f8 94       	cli

000040d4 <__stop_program>:
    40d4:	ff cf       	rjmp	.-2      	; 0x40d4 <__stop_program>
